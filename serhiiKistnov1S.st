{1,
{10,
{"serhii.Kistanov",1,0,"",""},
{4,
{"БСП",1,0,"",""},
{0,
{"ВнедрениеБСП",0,0,"ВнедрениеБСП_Кистанов","#Область ИнструкцияВнедренияБСП
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
//// ВНЕДРЕНИЕ   Библиотеки стандартных подсистем
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
//  1. Установить шаблон БСП
//  2. (Можно пропустить! для дальнейшего копирования модулей и т.д.) Установить БСП из шаблона
//  3. Создать пустую конфигурацию (сюда мы перенесем фундамент в виде БСП) /
//     (ЕСЛИ внедряем в существующую базу - Установить пустой пароль пользователю Администратор)
//  4. Запустить пустую (созданную на шаге 3) конфигурацию
//  5. Открыть обработку ""ПервоеВнедрениеБСП.epf"" в пользовательском режиме
//     (обработка находится в каталоке ""ExtFiles"" шаблона БСП)
//  6. Выбрать необходимый для внедрения перечень модулей (фундамент будущей конфигурации)
//  7. Выполнить команду ""Сохранить настройки для конфигуратора"" (файл xml - это правила объединения)
//  8. В режиме конфигуратора (пустой базы) выполняем команду 
//     ""Конфигурация > Сравнить, объединить с конфигурацией из файла""
//  9. Указываем ""1Cv8.cf"" файл конфигурации БСП который находится в папке шаблона БСП
// 10. В окне сравнения переходим в меню ""Действия"" и выбираем команду ""Загрузить настройки из файла""
//     и выбираем файл созданный и сохраненный на диск шагом 7
// 11. На вопрос ""Выполнить полную загрузку"" отвечаем ""НЕТ"" (это окно появляется если конфигурация пустая),
//     На вопрос ""Поставить на поддержку"" отвечаем ""ДА""
// 12. Нажимаем ""Выполнить"" (ждем выполнения операции ""сравнить, объединить"")
// 13. Появится окно ""Неразрешенные ссылки"" в котором нажимаем ""Продолжить""
//     , после чего откроется окно ""Настройка правил поддержки"" где нажимаем ""ок"".
// 14. Дожидаемся объединения (может длится более часа если выбранно очень много обк для внедрения)
// 15. Устанавливаем имя создаваемой конфигурации (имя, синоним, комментарий, поставщик) и версию 1.0.1.1
//     А также свойств конфигурации должны быть следующими:
//       Основной режим запуска должен быть установлен в Управляемое приложение.
//       В список Назначения использования должно входить значение Персональный компьютер.
//       Вариант встроенного языка должен быть установлен в Русский.
//       Режим управления блокировкой данных должен быть установлен в Управляемый.
//       Режим совместимости - допустимые значения см. в сопроводительном файле UpdateSSL.html
//       Режим использования модальности может быть установлен в Не использовать.
//       Режим совместимости интерфейса может принимать значения Версия 8.2, Версия 8.2. Разрешить Такси или Такси. Разрешить Версия 8.2.
//       Режим использования синхронных вызовов расширений и внешних компонент должен быть установлен в значение Использовать.
// 16. Копируем общий модуль ""ОбновлениеИнформационнойБазыБСП""
// 17. Переименовываем скопированный модуль (меняем БСП на сокр. наименование разрабатываемой конфигурации)
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
// 18. Открываем данный общий модуль и удаляем све его содержимое заменив на:
//  
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
//// Из инструкции БСП (https://its.1c.ru/db/bsp316doc#content:3:1:issogl2_действия_после_сравнения_объединения)
//// Действия после сравнения, объединения
////   1. Установить в свойствах конфигурации имя конфигурации, например, МояКонфигурация.
////   2. Установить в свойствах конфигурации номер версии разрабатываемой конфигурации. Например, 
////      при начале разработки конфигурации можно установить 1.0.1.1 в качестве номера версии.
////   3. Скопировать общий модуль ОбновлениеИнформационнойБазыБСП.
////   4. Заменить в названии скопированного модуля на имя или сокращение имени конфигурации 
////      (например, ОбновлениеИнформационнойБазыМК).
////   5. Заменить текст модуля на:
/////////////////////////////////////////////////////////////////////////////////////////////////////////

//#Область ПрограммныйИнтерфейс

//Процедура ПриДобавленииПодсистемы(Описание) Экспорт
//    Описание.Имя = ""УправлениеПользователямиУчетныхСистем"";
//    Описание.Версия = ""1.0.1.1"";
//    
//    // Требуется библиотека стандартных подсистем.
//    Описание.ТребуемыеПодсистемы.Добавить(""СтандартныеПодсистемы"");
//КонецПроцедуры
//Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
//    
//КонецПроцедуры
//Процедура ПередОбновлениемИнформационнойБазы() Экспорт
//    
//КонецПроцедуры
//Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
//        Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
//    
//КонецПроцедуры
//Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
//    
//КонецПроцедуры
//Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
//    
//КонецПроцедуры
//Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
//    
//КонецПроцедуры 
//Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
//    
//КонецПроцедуры
//
//#КонецОбласти
//
//    В процедуре ""ПриДобавленииПодсистемы"" данного модуля необходимо указать
//    имя и версию (в точности как указанно в свойствах конфигурации), пример:
//      Описание.Имя = ""УправлениеПользователямиУчетныхСистем"";
//      Описание.Версия = ""1.0.1.1"";
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 19. Разрешаем редактировать модуль ""ПодсистемыКонфигурацииПереопределяемый"" 
//     с сохранением поддержки (""Конфигурация > Поддержка > Настройка поддержки"")
// 20. В процедуре ""ПриДобавленииПодсистем"" модуля ""ПодсистемыКонфигурацииПереопределяемый""
//     добавить скопированный общий модуль в передаваемый массив, пример:
//     ""МодулиПодсистем.Добавить(""ОбновлениеИнформационнойБазыУПУС"");""
//
// 21. Выполняем команду ""Обновить конфигурацию базы данных (F7)"" (жмем бочку)
// 22. Если внедрение проходит не в пустой конфигурации 
//     ТОГД необходимо выдать пользователю ""Администратор"" все Роли БСП
// 23. Запускаем конфигурацию (F5)
// 24. Должо пройти корректно обновление (иначе мы сделали что-то не так на пред. шагах)
// 25. Закрываем КОНФИГУРАТОР
// 26. В интерактивном режиме (режим пользователя) открываем обработку ""ПервоеВнедрениеБСП.epf""
//     (это та же обработка что и на шаге 5) и выполнить команду ""Удалить"" (пункт 3 в данной обработке)
//	   Автоматически будет запущен конфигуратор и произведено удаление лишних объектов
// 27. Заходим в конфигуратор и выполняем команду ""Обновить конфигурацию базы данных (F7)"" (жмем бочку)
// 28. Запускаем интерактивный режим (если ошибок запуска нет - значит внедрение БСП успешно выполнено!)
//     Также для проверки корректности внедрения можно воспользоваться обработкой ""ПроверкаВнедренияБСП.erf""
//     (обработка находится в каталоке ""ExtFiles"" шаблона БСП)

#КонецОбласти"}
},
{0,
{"ОписаниеПроцедурИФункций",0,0,"","/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////ЗАГОЛОВОК ПРОЦЕДУР И ФУНКЦИЙ///////////////////////////////////////////////////////
// Следует избегать комментариев, не дающих дополнительных пояснений о работе не-экспортной процедуры (функции).
 
Комментарий размещается перед объявлением процедуры (функции) и имеет следующий вид:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
* Секция ""Описание"" Может быть единственной секцией для процедур БЕЗ параметров.
* Секция ""Описание"" НЕ должно совпадать с именем процедуры (функции).

* Секция ""Описание"" (англ. ""Description"") содержит:
    1. Описание назначения процедуры (функции), достаточное для понимания сценариев ее использования без просмотра ее исходного кода.	  
    2. Может содержать краткое описание принципов работы 
	3. Может содержать перекрестные ссылки на СВЯЗАННЫЕ процедуры и функции.  

* Секция ""Описание"" для Процедур и Функций должна начинаться с ГЛАГОЛА:
	
	1. Для ФУНКЦИЙ это, как правило: «Возвращает…». 
	2. В тех случаях, когда возвращаемый результат является не основным в работе функции,
	   то с основного действия, например: «Проверяет…», «Сравнивает…», «Вычисляет…» и т.п.
	   
	Не рекомендуется начинать описание с избыточных слов «Процедура...», «Функция...»,
	а также с имени самой процедуры (функции), от удаления которых смысл не меняется.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////ПАРАМЕТРЫ///////////////////////////////////////////////////////////////
* Секция ""Параметры"" (англ. ""Parameters"") описывает:
    1. Параметры процедуры (функции). Если их нет, секция пропускается.	   
    2. Имя параметра необходимо стремиться выбирать таким образом, чтобы его назначение было понятно в контексте функции без дополнительных пояснений.
	3. Тип может быть описан явно, при этом может быть указан или один тип или список типов.
	   Под «списком типов» подразумеваются имена типов, разделенные запятыми. 
	   Имя типа может быть простым (в одно слово) или составным - в два слова, разделенных точкой.
       (Например: Строка, Структура, Произвольный, СправочникСсылка.Сотрудники)
	
    4. В качестве типов значений следует использовать только существующие в платформе типы, а также специальные типы, предусмотренные в EDT:
       ОпределяемыйТип.<Имя>, СправочникСсылка, ОбъектМетаданныхОтчет, РасширениеДекорацииФормыДляНадписи и т.п.
       Например:
           КоллекцияСтрок           – ТаблицаЗначений, Массив, СписокЗначений – коллекция для сравнения.
           ФормируемыйОтчет         – ОбъектМетаданныхОтчет.
           ПрисоединенныйФайлОбъект - ОпределяемыйТип.ПрисоединенныйФайлОбъект - элемент справочника файлов.
		   
    5. Текстовое описание параметра рекомендуется заполнять в том случае:
	       Когда только имени параметра в контексте функции не достаточно для понимания его назначения.
		   
	       Когда требуется дать дополнительную информацию о типе, поясняющие назначение параметра.
		   
		   Когда может приводиться наглядный пример с ожидаемым значением параметра.

		   Пример:
                 Проверяет, что переданные адреса включены в задачу. Если проверка не проходит – генерируется исключение.

                 //Параметры:
                 //    Адреса - Строка - содержит электронные адреса, разделенные запятой. Например, support@mycorp.ru,v8@localdomain.
                 //    ЗадачаИсполнителя - ЗадачаСсылка.ЗадачаИсполнителя
                 //Процедура ПроверитьАдресаЗадачи(Адреса, ЗадачаИсполнителя)
				 
           В данном примере текстовое описание для параметра «Адреса» нужно чтобы
           указать правило передачи нескольких адресов (через зяпятую); // привести пример.
           Текстовое описание для параметра ЗадачаИсполнителя не нужно.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		   
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////ПРИМЕР ОПИСАНИЯ ПАРАМЕТРОВ///////////////////////////////////////////////////////
Для параметров типа Структура и ТаблицаЗначений:
// Параметры:
//   СтатусыСерий - ТаблицаЗначений:
//     * Серия - СправочникСсылка.СерииНоменклатуры - если серия указана и она может
//               использоваться с новым значением номенклатуры на указанном складе, 
//               то возвращается переданное значение; если нет - пустая ссылка
//     * СтатусУказанияСерий - Число - если серии указываются в ТЧ ""Товары"", то 
//               возвращается рассчитанный статус, если для переданной
//               номенклатуры/склада серии не используется - возвращается 0
//               иначе возвращается переданный статус.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
Для параметров типа Массив следует указывать тип элементов с помощью ключевого слова ""из"" (англ. ""of""):
// ПеренаправленныеЗадачи - Массив из ЗадачаСсылка.ЗадачаИсполнителя
// 
// СведенияОбОбновлении  - Массив из Структура:
//     * КодАдресногоОбъекта - Строка
//     * Наименование        - Строка
//     * Индекс              - Строка
//     * ОбновлениеДоступно  - Булево
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
Для массивов, структур и таблиц значений могут быть вложенные описания,
при этом перед именами вложенных свойств число звездочек увеличивается: для первого уровня вложенности 2 звездочки, для второго 3 и т.д.
// Параметры:
//  СведенияОбОбновлении - Массив из Структура:
//     * КодАдресногоОбъекта - Структура:
//        ** КодРегиона             - Число - код региона (длина - 2).
//        ** КодНаселенногоПункта   - Число - код населенного пункта (длина - 3).
//        ** КодУлицы               - Число - код улицы (длина - 4).
//     * Наименование        - Строка
//     * ОбновлениеДоступно  - Булево
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Для параметра типа СтрокаТаблицыЗначений (СтрокаДереваЗначений) возможно задать состав свойств,
соответствующий колонкам его таблицы-владельца (дерева-владельца):
// СведенияОРегионе – СтрокаТаблицыЗначений: см. РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ
где КлассификаторСубъектовРФ - экспортная функция модуля менедежра регистра сведения АдресныеОбъекты, которая возвращает таблицу значений.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Для каждого параметра (когда параметр может быть разного типа) можно задать одно или несколько дополнительных описаний типов параметра.
//   Реквизиты - Строка - имена реквизитов, перечисленные через запятую.
//                        Например, ""Код, Наименование, Родитель"".
//             - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                        псевдоним поля для возвращаемой структуры с результатом,
//                        а в качестве значения (опционально) фактическое имя поля в таблице.
//                        Если значение не определено, то имя поля берется из ключа.
//             - Массив Из Строка, ФиксированныйМассив Из Строка - имена реквизитов.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Заданы с помощью ссылки на функцию-конструктор в формате ""см. ПутьКФункции"" (англ ""see MethodPath"").
// ПараметрыУказанияСерий - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
// Дубли - см. ОбработкаОбъект.ПоискИУдалениеДублей.ГруппыДублей
// РеквизитыКомпонент - Массив из см. ВнешниеКомпоненты.РеквизитыКомпоненты
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Обращающегося к реквизитам конкретного объекта метаданных или формы, можно ссылаться на типы реквизитов этого объекта (формы):
//  Запросы - см. Обработки.КонсольЗапросов.ТабличнаяЧасть.Запросы
//  ТипыДанных - см. Обработки.КонсольЗапросов.Реквизит.ДоступныеТипыДанных
//  Вложения - см. Справочники.ШаблоныСообщений.ФормаЭлемента.Вложения
//  КонтактнаяИнформация - см. Документы.ЗаказПокупателя.ФормаДокумента.Объект.КонтактнаяИнформация
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Когда подходящей функции-конструктора не существует и ее невозможно создать, допустимо указывать ссылку на другую процедуру 
(при полном совпадении параметров) или на параметр другой процедуры или функции, например:
// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
//
// Параметры:
//  НастройкиФормы - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.НастройкиФормы
//  Источники - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.Источники
//  ПодключенныеОтчетыИОбработки - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.ПодключенныеОтчетыИОбработки
//  Команды - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.Команды
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////ВОЗВРАЩАЕМЫЕ ПАРАМЕТРЫ/////////////////////////////////////////////////////////
Секция ""Возвращаемое значение"" (англ. ""Returns"") описывает тип и содержание возвращаемого значения функции. Для процедур эта секция отсутствует.
// Возвращаемое значение:
//  Строка

// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из переданных ролей доступна текущему пользователю, либо у него есть административные права.

// Возвращаемое значение: 
//  - ЛюбаяСсылка - ссылка на предопределенный элемент.
//  - Неопределено - если предопределенный элемент есть в метаданных, но не создан в ИБ.

// Возвращаемое значение:
//  - СправочникСсылка.Пользователи
//  - СправочникСсылка.ВнешниеПользователи
Текстовое описание возвращаемого значения рекомендуется заполнять в том случае, когда только одного описания функции не достаточно,
либо требуется дать дополнительную информацию о типе, например, о составе свойств или колонок возвращаемого значения.
Также может быть приведен пример с ожидаемым значением возвращаемого значения, либо сквозной пример размещается в секции ""Пример"" ниже.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////ПРИМЕР/////////////////////////////////////////////////////////////////
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru='%1 пошел в %2'""), ""Вася"", ""Зоопарк"") = ""Вася пошел в Зоопарк"".
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
В ПЕРЕОПРЕДЕЛЯЕМЫХ модулях в секции ""Пример"" следует размещать пример реализации переопределяемой процедуры, а не пример ее вызова.
Например, для процедуры ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) мы сообщаем что вернет функция передав знч:
// Пример:
//  ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы = ""8.3.4.365"";
//  ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти = 2;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////Варианты вызова/////////////////////////////////////////////////////////////
В редких случаях, когда сразу несколько параметров имеют дополнительные типы, 
рекомендуется добавить секцию ""Варианты вызова"" (англ. ""Сall options""), в которой дать описания наиболее частых или
всех возможных вариантов вызова функции с различными комбинациями типов параметров.
//
// Варианты вызова:
//   УниверсальнаяПроцедура(Тип11, Тип21) - описание ...
//   УниверсальнаяПроцедура(Тип12, Тип22) - описание ...
//   УниверсальнаяПроцедура(Тип11, Тип23) - описание ...
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////Документированный ПЕРЕХОД////////////////////////////////////////////////////////
Переход к другим объектам конфигурации, процедурам и функциям (в частности, для перехода к функциям-конструкторам структур).
Например:
// Описание универсальной процедуры.
// 
// См. УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа
//
// Параметры:
//   Параметр1 – Произвольный – описание параметра см. Справочник.Контрагенты.
//
Процедура УниверсальнаяПроцедура(Параметр1)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////Метка УСТАРЕЛА/////////////////////////////////////////////////////////////
отметить процедуру (функцию) как устаревшую, в первой строке ее описания размещается слово ""Устарела"" (англ. ""Deprecated"")
Например:
// Устарела. Следует использовать новую см. ОбщегоНазначения.ЕстьРоль
// ... 
Функция РолиДоступны(ИменаРолей) Экспорт
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////ПРИМЕР/////////////////////////////////////////////////////////////////
Описания функции с одним параметром:
// Определяет доступность ролей ИменаРолей текущему пользователю,
// а также доступность административных прав.
//
// Параметры:
//   ИменаРолей - Строка - имена ролей, доступность которых проверяется, разделенные запятыми.
//
// Возвращаемое значение:
//   Булево - Истина, если хотя бы одна из переданных ролей доступна текущему пользователю,
//   либо у него есть административные права.
//
// Пример:
// Если РолиДоступны(""ИспользованиеРассылокОтчетов,ОтправкаПоПочте"") Тогда ...
//
Функция РолиДоступны(ИменаРолей) Экспорт 

Описания процедуры без параметров:
// В обработчике события ПередЗаписью документа выполняется;
// - очистка табличной части услуги, в случае если указан договор с комиссионером;
// - проверка заполнения реквизита ЕдиницаИзмеренияМест табл. части Товары;
// - синхронизация с ""подчиненным"" счетом-фактурой;
// - заполнение склада и заказа покупателя в табличных частях Товары и ВозвратнаяТара;
// - удаление неиспользуемых строк табличной части ""Серийные номера"";
// - заполнение переменной модуля объекта УдалятьДвижение.
//
Процедура ПередЗаписью()"}
},
{0,
{"ДобавитьБСПRLSНовомуОбкВТиповойКонфигурации",0,0,"","///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 1. Добавить код в модуль менеджер объекта:
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	""РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)"";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Описание - возвращает структуру со значениями по которым будут проверяться права на разделы документа
// 				 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПриемНаРаботу, ДанныеФормыСтруктура - объект или данные формы, 
//					отображающие данные документа, для которого нужно получить данные
//
// Возвращаемое значение:
// 	Структура -  см. НовыйЗначенияДоступа - значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступа(ДокументОбъект) Экспорт
	Возврат МногофункциональныеДокументыБЗК.ЗначенияДоступаПоСоставуДокумента(
		ДокументОбъект, 
		ДокументОбъект.Организация);
КонецФункции

#КонецОбласти

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2. Добавить код в модуль формы объекта:
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 3. Добавить шаблон (см. ""Разработка ограничений прав доступа"" https://its.1c.ru/db/bsp314doc#content:4:1)"}
},
{0,
{"БСПКакПодключитьДополнительныеРеквизиты",0,0,"БСПКакПодключитьДополнительныеРеквизиты_Кистанов","БСП 2.3

1) В нашем объекте добавляем табличную часть ""ДополнительныеРеквизиты"", а точнее копируем ее из другого существующего справочника или документа, например, из справочника Пользователи, который изначально находится в составе конфигурации БСП.
2) На форме элемента нашего объекта добавляем группу с наименованием ""ГруппаДополнительныеРеквизиты"". Именно в этой группе и будет отображаться интерфейс дополнительных реквизитов.
3) В справочнике ""НаборыДополнительныхРеквизитовИСведений"" добавляем новый предопределенный элемент по шаблону - Справочник_Склады (если наш объект это справочник и называется он ""Склады""). То есть смотрим на существующие предопределенные элементы и добавляем необходимый аналогичным образом.
4) В Плане видов характеристик ""ДополнительныеРеквизитыИСведения"" добавляем тип нашего объекта, если необходим такой тип для созданий дополнительных реквизитов.
5) В модуле формы элемента нашего объекта размещаем следующие куски кода:

    В процедуре ПриСозданииНаСервере добавляем:

    // Обработчик подсистемы ""Свойства""
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить(""Объект"", Объект);
    ДополнительныеПараметры.Вставить(""ИмяЭлементаДляРазмещения"", ""ГруппаДополнительныеРеквизиты"");
    УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
    // Конец СтандартныеПодсистемы.Свойства
    В процедуре ПриЧтенииНаСервере добавляем:

    // СтандартныеПодсистемы.Свойства
    УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);    
    // Конец СтандартныеПодсистемы.Свойства    
     В процедуре ОбработкаПроверкиЗаполненияНаСервере добавляем:

    // СтандартныеПодсистемы.Свойства
    УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, Объект);
    // Конец СтандартныеПодсистемы.Свойства
     В процедуре ПередЗаписьюНаСервере  добавляем:

    // СтандартныеПодсистемы.Свойства
    УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.Свойства
    Добавляем следующие процедуры:

    // ПРОЦЕДУРЫ ПОДСИСТЕМЫ ""СВОЙСТВ""
    &НаКлиенте
    Процедура Подключаемый_РедактироватьСоставСвойств()
        УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
    КонецПроцедуры
    &НаСервере
    Процедура ОбновитьЭлементыДополнительныхРеквизитов()
        УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение(""Объект""));
    КонецПроцедуры
6) И еще один важный момент: у справочника ""НаборыДополнительныхРеквизитовИСведений"" есть реквизит ""Используется"". Для нашего созданного предопределенного элемента (см. пункт 3) необходимо установить значение Истина для этого реквизита. Но в пользовательском режиме 1С:Предприятие это не получится сделать, потому что этого реквизита нет на форме. Но можно воспользоваться стандартной обработкой ""Групповое изменение реквизитов"", где выбрать справочник ""НаборыДополнительныхРеквизитовИСведений"", сделать отбор по нашему созданному предопределенному элементу и установить значение Истина для реквизита ""Используется"". Примечание: если в обработке ""Групповое изменение реквизитов"" нет для выбора справочника ""НаборыДополнительныхРеквизитовИСведений"", то необходимо в настройке ""Дополнительные параметры"" включить галку ""Показывать служебные реквизиты""."}
}
},
{18,
{"Подсказки",1,0,"",""},
{0,
{"ВНИМАНИЕ_ПередачаТабличногоДокумента_ОшибкаXTDO",0,0,"","#Область ОшибкаПередачиТабличногоДокумента
// Написал я как то такую процедуру и была у меня ошибка преобразования XTDO
// Я думал что ошибка относится к ТабличномуДокументу но, нет проблемма была в параметре ""Запрос"",
// это структура где есть массив из массив из структура и другие ключи примитивного типа.
// Процедура отрабатывала нормально но, при выходе из процедуры возникала ошибка XTDO и решил я это
// 1. Передачей по значению (Знач Запрос) 2. ИЛИ в конце процедуры очистка переменной (Запрос = Неопределено).

&НаСервереБезКонтекста
Процедура НаполнитьТабличныйДокументДаннымиЗапроса(Знач Запрос, ТабличныйДокумент)
	
	РезультатЗапроса = НовыйРезультатЗапроса(Запрос.Параметры, Запрос.Текст, Запрос.ДанныеВТ, Запрос.ИменаВТ);
	РезультатЗапросаВТабличныйДокумент(РезультатЗапроса, ТабличныйДокумент);
	
	// ИЛИ так: Запрос = Неопределено;
	
КонецПроцедуры // НаполнитьТабличныйДокументДаннымиЗапроса()

#КонецОбласти"}
},
{0,
{"ЗаполнитьФормуПоКлючу_ВызовМетодаФОРМЫ",0,0,"ЗаполнитьФормуПоКлючу_Кистанов","
#Область ЗаполнитьФормуПоКлючу_ВызовМетодаФОРМЫ

#Область Синтаксис

отбор = Новый Структура(""Ключ"", <? ""ЗначениеКлюча"">);
форма = ПолучитьФорму(<?>, отбор);
// ИЛИ при необходимости, можно открыть форму: ОткрытьФорму("""", отбор);

#КонецОбласти

#Область Пример

// Получения формы выделенных строк в форме списка и вызов метода формы:
&НаКлиенте
Процедура РасшБагз_ПересчитатьДокументыВместо(Команда)
	Для каждого Элемент из Элементы.Список.ВыделенныеСтроки Цикл
		ПараметрыФормы = Новый Структура(""Ключ"", Элемент);
		фрм = ПолучитьФорму(""Документ.ДанныеДляРасчетаЗарплаты.ФормаОбъекта"",ПараметрыФормы);						
		фрм.РасшБагз_СортВиноградаПриИзмененииПосле(Неопределено);
		фрм.Записать();
	КонецЦикла;                                       
	Сообщить (""Пересчет документов завершен.""); 	
КонецПроцедуры

#КонецОбласти

#КонецОбласти"}
},
{0,
{"ПереопределитьПараметрыКомпоновщикаОтчета",0,0,"ПереопределитьПараметрыКомпоновщикаОтчета_Кистанов","#Область ПереопределитьПараметрыКомпоновщикаОтчета
<?>

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб        = Истина;
	
	Организация     = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ""Организация"");
	Подписант1 		= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ""ПодвалФИО1"");
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ""ПодвалДолжность1"", 
	                                                ДолжностьФизЛица(Подписант1.Значение,	Организация.Значение));	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ""ПодвалФИО1_"", 
	                                                ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Подписант1.Значение)));
	
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ПолучитьЗнчРеквизитаНаходящегосяНаФормы",0,0,"ПолучитьЗнчРеквизитаНаходящегосяНаФормы_Кистанов","<?>
// Например необходимо получить знч реквизита (формы) ""ОтветственноеЛицо"" справочника ""Склады"", ТОГДА:
// ПолучитьФорму(""Справочник.Склады.ФормаОбъекта"", новый Структура(""Ключ"",СкладСсылка)).ОтветственноеЛицо
&НаКлиенте
ПолучитьФорму(""<?""МетаданныеПуть"">.ФормаОбъекта"", новый Структура(""Ключ"",<?""Обк ссылка"">)).<?""получитьРеквизит"">;"}
},
{0,
{"ПолучитьМакетИзКонтекстаЭтотОбъект",0,0,"ПолучитьМакетИзКонтекстаЭтотОбъект_Кистанов","<?>
Макет = ЭтотОбъект.ПолучитьМакет(<?""имяМакета"">);"}
},
{0,
{"ПолучитьМакетИзКонтекстаФормы",0,0,"ПолучитьМакетИзКонтекстаФормы_Кистанов","<?>
&НаСервере
Функция ПолучитьМакетНаСервере(<?""имяМакета"">)
	Возврат РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(<?""имяМакета"">);
КонецФункции"}
},
{0,
{"ТекстыЗапросовПакета",0,0,"ТекстыЗапросовПакета_Кистанов","<?>
ТекстыЗапросовПакета = Новый Массив;
Разделитель          =
""
|;
|/////////////////////////////////////////////////////////////
|"";

ТекстЗапроса =
""ВЫБРАТЬ
| Упаковки.Ссылка КАК Ссылка
|ИЗ
| Справочник.Упаковки КАК Упаковки"";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);

ТекстЗапроса =
""ВЫБРАТЬ
| Номенклатура.Ссылка КАК Ссылка
|ИЗ
| Справочник.Номенклатура КАК Номенклатура "";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);"}
},
{0,
{"КонкатенацияТекстаЗапроса",0,0,"КонкатенацияТекстаЗапроса_Кистанов","<?>
Разделитель =
""
|;
|/////////////////////////////////////////////////////////////
|"";

ТекстыЗапросовПакета = Новый Массив;

ТекстЗапроса =
""ВЫБРАТЬ
| Упаковки.Ссылка КАК Ссылка
|ИЗ
| Справочник.Упаковки КАК Упаковки"";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);

ТекстЗапроса =
""ВЫБРАТЬ
| Номенклатура.Ссылка КАК Ссылка
|ИЗ
| Справочник.Номенклатура КАК Номенклатура "";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);"}
},
{0,
{"ПланыОбмена",0,0,"","///////////////////////////////////////////////////////////////////////
//   ВНИМАНИЕ: На предопределенном узле НЕ регистрирует изменения!   //
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
// 1. Программная регистрация прикладного объекта:
//    (ПРИ ИЗМЕНЕНИИ прикладного объекта)
#Область ПланыОбменаЗарегистрироватьИзменения

Процедура ПланыОбменаЗарегистрироватьИзменения(ИмяУзла, Источник) Экспорт

   Если Источник.НенадоРегистрировать Тогда
     Возврат;
   КонецЕсли;


  Узел = ПланыОбмена.Exe_umac.НайтиПоНаименованию(ИмяУзла);;
  ПланыОбмена.ЗарегистрироватьИзменения(Узел, Источник);
  
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////////////////////////
// 2. Выгружаем данные зарегистрированные на узле,
//    а также устанавливаем новый номер сообщения:
//    (ПРИ событии - ВЫПОЛНИТЬ ОБМЕН)
#Область ПланыОбменаВыгрузитьИзменения

Функция ПланыОбменаВыгрузитьИзменения(ИмяУзла) Экспорт
    Узел = ПланыОбмена.Exe_umac.НайтиПоНаименованию(ИмяУзла);
	ДанныеВыгрузки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ
	|	ФизическиеЛицаИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.Изменения КАК ФизическиеЛицаИзменения
	|ГДЕ
	|	ФизическиеЛицаИзменения.Узел = &Узел"";
	Запрос.УстановитьПараметр(""Узел"", Узел);
	
	Выборка = Запрос.Выполнить().Выбрать();		
	Пока Выборка.Следующий() Цикл
		ДанныеВыгрузки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, ДанныеВыгрузки);
	
	УзелОбъект    = Узел.ПолучитьОбъект();
	НомерВыгрузки = УзелОбъект.НомерОтправленного + 1;
	УзелОбъект.НомерОтправленного = НомерВыгрузки;
	УзелОбъект.Записать();

	Выгрузка = Новый Структура;
	Выгрузка.Вставить(""Номер"",  НомерВыгрузки);
	Выгрузка.Вставить(""Данные"", ДанныеВыгрузки);
	
	Возврат Выгрузка;	
КонецФункции

#КонецОбласти



///////////////////////////////////////////////////////////////////////
// 3. Снять с регистрации плана обмена:
//    (ПРИ событии - ПОЛУЧЕН ОТВЕТ успешно выполненого обмена)
#Область ПланыОбменаСнятьСРегистрации

#Область ПланыОбменаСнятьСРегистрацииПоНомеруВыгрузки

Процедура ПланыОбменаСнятьСРегистрацииПоНомеруВыгрузки(ИмяУзла, НомерВыгрузки) Экспорт

  Узел = ПланыОбмена.Exe_umac.НайтиПоНаименованию(ИмяУзла);
  ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерВыгрузки);
  
КонецПроцедуры

#КонецОбласти
//
//
//
#Область ПланыОбменаСнятьСРегистрацииПоСсылке

Процедура ПланыОбменаСнятьСРегистрацииПоСсылке(ИмяУзла, СсылкаНаОбъект) Экспорт

  Узел = ПланыОбмена.Exe_umac.НайтиПоНаименованию(ИмяУзла);
  ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СсылкаНаОбъект);
  
КонецПроцедуры

#КонецОбласти

#КонецОбласти"}
},
{0,
{"ОбходВыделенныхСтрокТЧ",0,0,"ОбходВыделенныхСтрокТЧ_Кистанов","&НаКлиенте
Процедура УстановитьВыделенымСтрокамОбщийСценарий(ОбщийСценарий)
	
	ВыделенныеЭлементы = Элементы.ТаблицаЗависимостей.ВыделенныеСтроки;
	Для каждого ИндексВыделенногоЭлемента Из ВыделенныеЭлементы Цикл
		СтрокаТаблицы 	= ТаблицаЗависимостей.НайтиПоИдентификатору(ИндексВыделенногоЭлемента);
		ИндексСтроки 	= ТаблицаЗависимостей.Индекс(СтрокаТаблицы);
		
		ТаблицаЗависимостей[ИндексСтроки].Сценарий = ОбщийСценарий;
	КонецЦикла;

КонецПроцедуры"}
},
{0,
{"БыстраяСортировка",0,0,"БыстраяСортировка_Кистанов","		
ВремСписок = Новый СписокЗначений();
    ВремСписок.Добавить(Сумма1, ""Сумма документа 1"");
    ВремСписок.Добавить(Сумма2, ""Сумма документа 2"");
    ВремСписок.Добавить(Сумма3, ""Сумма документа 3"");
    ВремСписок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
МинимальнаяСумма = ВремСписок[0].Значение;"}
},
{0,
{"ФоновоеВыполнение",0,0,"","ТекстФоновойПроцедуры = ""ОбщийМодульEmail.ОтправитьСодержимое(отправительИмя, массивАдресаПолучателей, тема, содержимоеТекст);"";
ФоновоеВыполнение.ЗапуститьФоновоеВыполнение(ТекстФоновойПроцедуры, Новый Структура(""отправительИмя, массивАдресаПолучателей, тема, содержимоеТекст"",
					 																	 отправительИмя, получательEmail, тема, содержимоеТекст));
"}
},
{0,
{"ЭлементФормыСписокВыбора",0,0,"","// Заполнение списка происходит у элемента формы
// ,а устанавливается знч реквизиту.
&НаКлиенте
Функция СценарийДляВсехВыделеныхЗначениеПоУмолчанию()

	ЗнчПоУмолчанию = Элементы.СценарийДляНайденыхВыделеных.СписокВыбора.Добавить(""Просмотр"");	
	ЭтаФорма.СценарийДляВсехВыделеных = ЗнчПоУмолчанию;
	
КонецФункции // СценарийДляВсехВыделеныхЗначениеПоУмолчанию()"}
},
{0,
{"ОбойтиВсеВыделенныеСтрокиТЧ",0,0,"ОбойтиВсеВыделенныеСтрокиТЧ_Кистанов","	ВыделенныеЭлементы = Элементы.ТаблицаЗависимостей.ВыделенныеСтроки;
	Для каждого ИндексВыделенногоЭлемента Из ВыделенныеЭлементы Цикл
		СтрокаТаблицы 	= ТаблицаЗависимостей.НайтиПоИдентификатору(ИндексВыделенногоЭлемента);
		ИндексСтроки 	= ТаблицаЗависимостей.Индекс(СтрокаТаблицы);
		
		ТаблицаЗависимостей[ИндексСтроки].Сценарий = ОбщийСценарий;
	КонецЦикла;"}
},
{0,
{"ОтладкаВнешнихПФЧерезКомандуФормы",0,0,"ОтладкаВнешнихПФЧерезКомандуФормы_Кистанов","
#Область ОтладкаВнешнихПФ

&НаКлиенте
Процедура Печать(Команда)
	ПечатьНаСервере().Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	
	// докСсылка - это реквизит на форме, Ссылка на конкретный документ.
	
	докСсылка 	= Объект.СсылкаНаОбъект;
	л_Объект	= РеквизитФормыВЗначение(""Объект"");
	мДок 		= новый Массив;
	
	мДок.Добавить(докСсылка);
	
	// ВХОДНОЙ ПАРАМЕТР:
	// МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;  #МОЖНО ПЕРЕДАТЬ МАССИВ ОБК
	// ВЫХОДНОЙ ПАРАМЕТР:
	// ОбъектыПечати  - СписокЗначений - значение - ссылка на объект;			#МОЖНО ПЕРЕДАТЬ МАССИВ ОБК
	//
	// Функция ""СформироватьТабДокумнтОбразца"" - находимтся в модуле объекта обработки и вызывается в процедуре ""Печать""
	// ВНИМАНИЕ: на время отладки - этой функции необходимо добавить ключевое слово ""Экспорт"",
	// пример (в модуле объекта станет так): ""Функция СформироватьТабДокумнтОбразца(МассивОбъектов, ОбъектыПечати) Экспорт""
	//
	// НЕ ОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР:
	// #ДанныеДляпечати = ОбъектыПечати; #ВСЕ НЕ ОБЯЗАТЕЛЬНЫЕ ПАРАМЕТРЫ НУЖНО СМОТРЕТЬ В ОБРАБОТКЕ,
	// ЧАСТО ЭТО ССЫЛКА НА ПЕРВЫЙ ОБК из массива обязательных параметров
	//
	// ПРИМЕР:
	// л_Объект.ФункцияСформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати);

	МассивОбъектов = ДанныеПечатиДокументов(мДок);
	Возврат л_Объект.СформироватьТабДокумнтОбразца(МассивОбъектов, мДок, мДок); // Место для ТОЧКИ ОСТАНОВА с заходом В!
	
КонецФункции

// ""Служебная"" Функция - Универсальная - используетсяв ПечатьНаСервере
&НаСервере
Функция ДанныеПечатиДокументов(МассивОбъектов) Экспорт
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	|	док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ."" + МассивОбъектов[0].Метаданные().Имя + "" КАК док
	|ГДЕ
	|	док.Ссылка В(&МассивОбъектов)"";
	
	Запрос.УстановитьПараметр(""МассивОбъектов"", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;		
	КонецЕсли;	
КонецФункции

#КонецОбласти"}
},
{0,
{"ВыборКогдаПериодичностьПоПозицииРегистратора",0,0,"ВыборКогдаПериодичностьПоПозицииРегистратора_Кистанов","	""ВЫБРАТЬ
	|	Регистр.Период				КАК ПериодРегистрации,
	|	Регистр.Организация			КАК Организация,
	|	Регистр.Объект				КАК ОС,
	|	Регистр.СуммаАмортизацииБУ  КАК СуммаБУ
	|	ПОМЕСТИТЬ ВТОтборОС
	|ИЗ
	|	РегистрСведений.РасчетАмортизации.СрезПоследних(
	|	&Период, Организация = &Организация И Объект В (&ОсновныеСредства)) КАК Регистр
	|;
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(Амортизация.ПериодРегистрации)	КАК ПериодРегистрации,
	|	Амортизация.Организация					КАК Организация,
	|	Амортизация.ОС							КАК ОС
	|	ПОМЕСТИТЬ ВТСрезПоследних
	|ИЗ
	|	ВТОтборОС КАК Амортизация
	|	
	|СГРУППИРОВАТЬ ПО
	|	Организация,
	|	ОС
	|;
	|
	|ВЫБРАТЬ
	|	ТабОС.ОС		КАК ОС,
	|	ТабОС.СуммаБУ 	КАК СуммаБУ
	|ИЗ
	|	ВТОтборОС КАК ТабОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезПоследних КАК СрезПоследних
	|	ПО ТабОС.ПериодРегистрации 	= СрезПоследних.ПериодРегистрации
	|	И  ТабОС.Организация 		= СрезПоследних.Организация
	|	И  ТабОС.ОС 				= СрезПоследних.ОС"";"}
},
{0,
{"СКДВычисляемыеПоля",0,0,"СКДВычисляемыеПоля_Кистанов","// Полный синтаксис функции следующий:
// ВычислитьВыражение(Выражение, Группировка, ТипРасчета, Начало, Конец, Сортировка, ИерархическаяСортировка, ОбработкаОдинаковыхЗначенийПорядка)

// ВАЖНО: ""Рассчитать по..."" на закладке ""Вычисляемые поля"" я не заполнял и это положительно сказывается (иначе не работает)



// Что бы получить минимальное значение в группировке ""ТранспортноеСредство"" (получить первое значение),
// на закладке ""Вычисляемые поля"" создаем вычисляемое поле которое на закладку ""Ресурсы"" оборачиваем в Минимум
ВычислитьВыражение(""ОстатокПриВыезде"",""ТранспортноеСредство"",,""Текущая"", ""Текущая"")



// Что бы получить максимальное значение в группировке ""ТранспортноеСредство"" (получить последнее значение),
// на закладке ""Вычисляемые поля"" создаем вычисляемое поле которое на закладку ""Ресурсы"" оборачиваем в Максимум
ВЫБОР 
КОГДА ВычислитьВыражение(""МАКСИМУМ(ДатаПутевогоЛиста)"",""ТранспортноеСредство"",""Группировка"") = ДатаПутевогоЛиста ТОГДА
ОстатокПриВозвращении КОНЕЦ



// Пошаговое наращивание суммы по колонке
ВычислитьВыражение(""СУММА(ОстатокПриВыезде)"",,""Группировка"",""Первая"",""Текущая"")


// Доп. информация, я добавил свой макет и для обычных знч. использовал отдельные строки макета, для вычисляемых тоже отдельные,
// так как я хотел выводить минимум и максимум соответственно исключительно в итоговых показателях."}
},
{0,
{"ВыбратьДопОтчетыИОбработки",0,0,"ВыбратьДопОтчетыИОбработки_Кистанов","Выбрать * ИЗ Справочник.ДополнительныеОтчетыИОбработки КАК ДО
     ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Разделы
КАК Р ПО ДО.Ссылка = Р.Ссылка И Р.Ссылка Есть NULL
     ГДЕ ИмяФайла ПОДОБНО ""%.erf"""}
}
},
{1,
{"Стандарты1С",1,0,"",""},
{7,
{"СоглашенияПриНаписанииКода",1,0,"",""},
{0,
{"ОбщееОписание",0,0,""," Заголовок модуля представляет собой комментарий в самом начале модуля.
 В заголовке модуля приводится его краткое описание и условия применения.
 Например:
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////


Для модулей форм в заголовке рекомендуется размещать описание параметров формы."}
},
{0,
{"СтандартОписанияМодуляФормы",0,0,"СтандартОписанияМодуляФормы_Кистанов","<?>
// 1. «ОбработчикиСобытийФормы» процедуры-обработчики событий формы:
// ПриСозданииНаСервере, ПриОткрытии и т.п.

// 2. «ОбработчикиСобытийЭлементовШапкиФормы» процедуры-обработчики элементов,
// расположенных в основной части формы (все, что не связано с таблицами на форме).

// 3. «ОбработчикиСобытийЭлементовТаблицыФормы <имя таблицы формы>» процедуры-обработчики
//  таблиц формы и элементов таблиц. Для процедур-обработчиков каждой таблицы должен быть создан свой раздел.

// 4. «ОбработчикиКомандФормы» процедуры-обработчики команд формы
// (имена которых задаются в свойстве Действие команд формы).

// 5. «СлужебныеПроцедурыИФункции» процедуры и функции, составляющие внутреннюю реализацию модуля.

// ( В тех случаях, когда модуль является частью некоторой функциональной подсистемы,
// в этом разделе также могут быть размещены служебные экспортные процедуры и функции,
// предназначенные только для вызова из других объектов данной подсистемы )

#Область ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
#КонецОбласти

#Область ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти"}
},
{0,
{"СтандартОписанияОбщегоМодуля",0,0,"СтандартОписанияОбщегоМодуля_Кистанов","Для объемных общих модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку.
Например:
//#Область ОбновлениеИнформационнойБазы
//    Код процедур и функций
//#КонецОбласти

#Область ПрограммныйИнтерфейс
    // Такие процедуры и функции предназначены для использования другими объектами конфигурации 
	// или другими программами (например, через внешнее соединение).
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
    // В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только
	// из других функциональных подсистем этой же библиотеки. (например: у объекта есть две формы (А,Б)
	// где форма А содержит ""СлужебныйПрограммныйИнтерфейс"" который вызывает форма Б (подсистем этой же библиотеки).
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти"}
},
{0,
{"СтандартОписания_МодулейОбк_МенеджеровНаборовЗаписей_Обработок_Отчетов",0,0,"СтандартОписания_МодулейОбк_МенеджеровНаборовЗаписей_Обработок_Отчетов_Кистанов","
#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс
    // Такие процедуры и функции предназначены для использования другими объектами конфигурации 
	// или другими программами (например, через внешнее соединение).
#КонецОбласти

#Область ОбработчикиСобытий
    // Содержит обработчики событий модуля объекта (ПриЗаписи, ПриПроведении и др.)
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
    // В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только
	// из других функциональных подсистем этой же библиотеки. (например: у объекта есть две формы (А,Б)
	// где форма А содержит ""СлужебныйПрограммныйИнтерфейс"" который вызывает форма Б (подсистем этой же библиотеки).
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
    // Код процедур и функций
#КонецОбласти

#Область Инициализация

#КонецОбласти"}
},
{0,
{"СтандартОписанияМодулейКоманд",0,0,"СтандартОписанияМодулейКоманд_Кистанов","
#Область ОбработчикиСобытий
    // Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
    // Код процедур и функций
#КонецОбласти"}
},
{0,
{"СтандартОписанияПеременныхМодуля",0,0,"СтандартОписанияПеременныхМодуля_Кистанов","Все переменные модуля должны быть снабжены комментарием, достаточным для понимания их назначения.
Комментарий рекомендуется размещать в той же строке, где объявляется переменная.
Пример:                                                                                          

#Область ОписаниеПеременных

Перем ВалютаУчета;
Перем АдресПоддержки;
...

#КонецОбласти"}
},
{0,
{"СтандартОписанияИнициализацияМодуля_Объекта_Формы",0,0,"СтандартОписанияИнициализацияМодуля_Объекта_Формы_Кистанов","Раздел инициализации содержит операторы, инициализирующие переменные модуля или объект (форму).
Например:

#Область Инициализация

АдресПоддержки = ""v8@1c.ru""; 
ВыполнитьИнициализацию();
...

#КонецОбласти"}
}
}
},
{5,
{"Редкие",1,0,"",""},
{0,
{"ОтправитьПочтовоеСообщение",0,0,"ОтправитьПочтовоеСообщение_Кистанов","#Область ОтправитьПочтовоеСообщение
<?>
// Рекомендация использовать с:
//   
//
// Зависимости:
//   ТекущаяОбласть - ПрофильПочтыМассаднраРУ
//
// Параметры:
//   отправительИмя - Строка - имя (адрес) отправителя письма (support@massandra.ru).
//   массивАдресаПолучателей - Массив Из Строка - адреса разделенные запятой (it@massandra.su, it@massandra.ru).
//   тема - Строка - тема письма.
//   содержимоеТекст - Строка - текст в тело письма.
//   ФайлВложения - Любой файл (бинарные данные)
//   типТекста - ТипТекстаПочтовогоСообщения - по умолчанию ""ПростойТекст""
//
// Возвращаемое значение:
//   Булево - Истина, если письмо успешно отправленно.
//
// Пример:
//   ОтправитьПочтовоеСообщение(""support@massandra.ru"", массивАдресаПолучателей, ""Отчет ДДС"", 
//                              ""Добрый день! Высылая отчет движения денежных средств на 01.01.2022"", ФайлВложения);
//
Функция ОтправитьПочтовоеСообщение(отправительИмя, массивАдресаПолучателей, тема, содержимоеТекст, 
	                               ФайлВложения = Неопределено, типТекста = Неопределено) Экспорт
	
	Если массивАдресаПолучателей.Количество() = 0 Тогда
		Сообщить(""Укажите получателя письма!"");
		Возврат Ложь;
	КонецЕсли;
	
	Профиль = ПрофильПочтыМассаднраРУ();	
	Письмо = Новый ИнтернетПочтовоеСообщение;

	Текст = Письмо.Тексты.Добавить(содержимоеТекст, ?(типТекста = Неопределено, ТипТекстаПочтовогоСообщения.ПростойТекст, типТекста) );
	Текст = Письмо.Тексты.Добавить(Символы.ПС);
	Если ФайлВложения <> Неопределено Тогда
		ФайлДляВложения	= ФайлВложения.путь + ФайлВложения.имя;
		Письмо.Вложения.Добавить(ФайлДляВложения, ""Файл вложения"");
	КонецЕсли;
	
	Письмо.Тема = тема; 
	Письмо.Отправитель = Профиль.Пользователь;
    Письмо.ИмяОтправителя = отправительИмя;
	Для Каждого получатель Из массивАдресаПолучателей Цикл
		Письмо.Получатели.Добавить(получатель);
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
    Попытка
        Почта.Подключиться(Профиль);
        Почта.Послать(Письмо);
		Сообщить(""Почтовое сообщение отправлено успешно! Получатель: "" + СтрСоединить(массивАдресаПолучателей, "", ""));		
    Исключение
        Сообщить(""Не удалось подключиться к почтовому серверу!"");
        Сообщить(ОписаниеОшибки());
		Возврат Ложь;
    КонецПопытки;
	
	Почта.Отключиться();
	Возврат Истина;		
	
КонецФункции

Функция ПрофильПочтыМассаднраРУ()
	профиль = Новый ИнтернетПочтовыйПрофиль;
	
	профиль.АдресСервераSMTP = ""mail.massandra.ru"";
    профиль.ПортSMTP = 465;
	профиль.Пользователь = ""app1C@massandra.ru"";
	профиль.Пароль = ""********"";
	профиль.ПользовательSMTP = ""app1C@massandra.ru"";
	профиль.ПарольSMTP = ""********"";
	
	профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;

	Возврат профиль;	
КонецФункции

#КонецОбласти
"}
},
{0,
{"НовыйСообщитьПользователю",0,0,"НовыйСообщитьПользователю_Кистанов","#Область СообщитьПользователю

#Область СервернаяФункция
// 1) Серверная функция (вызывается с сервера)
//    Выводит сообщение на экран пользователя.
//
// Рекомендация использовать с:
//   НовыйСообщитьПользователю
//
// Зависимости:
//   ТекущаяОбласть - СообщитьПользователюКлиентСервер
//
// Параметры:
//   ТекстСообщенияПользователю - Строка - текст сообщения.
//   КлючДанных - Ссылка на объект, Ссылка на объект информационной базы,
//                к которому это сообщение относится, или ключ записи.
//   Поле - Строка - Содержит путь к реквизиту формы, для которого было
//                   выведено сообщение, или к данным объекта.
//                  (Например, путь к реквизиту Номенклатура в строке
//                   с индексом 10 табличной части документа, в которой
//   				 произошла ошибка: ТабличнаяЧастьСоставДокумента[10].Номенклатура.
//   Отказ - Ссылка - ссылка на Отказ который присутствует в обработчиках объектов.
//
// Пример:
//	  МассивТекста = Новый Массив;
//	  МассивТекста.Добавить(""Привет сервер!"");
//	  МассивТекста.Добавить(""Это массив текста."");
//	  Сообщение = СтрСоединить(МассивТекста, ""-"");
//	  СообщитьПользователюНаСервере(Сообщение); = ""Привет сервер! - Это массив текста.""
//
&НаСервере
Процедура СообщитьПользователюНаСервере(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено, Знач Поле = """", Отказ = Ложь) Экспорт
 
 ЭтоОбъект = Ложь;
 Если КлючДанных <> Неопределено
  И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
  
  ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
  ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, ""Object."") > 0;
 КонецЕсли;
 
 ОбщегоНазначенияСлужебныйКлиентСервер.СообщитьПользователюКлиентСервер(ТекстСообщенияПользователю, КлючДанных, Поле, Отказ, ЭтоОбъект);
 
КонецПроцедуры

#КонецОбласти

#Область КлиентскаяФункция
// 2) Клиентская функция (вызывается на клиенте)
//    Выводит сообщение на экран пользователя.
//
// Рекомендация использовать с:
//   
//
// Зависимости:
//   ТекущаяОбласть - СообщитьПользователюКлиентСервер
//
// Параметры:
//   ТекстСообщенияПользователю - Строка - текст сообщения.
//   КлючДанных - Ссылка на объект, Ссылка на объект информационной базы,
//                к которому это сообщение относится, или ключ записи.
//   Поле - Строка - Содержит путь к реквизиту формы, для которого было
//                   выведено сообщение, или к данным объекта.
//                  (Например, путь к реквизиту Номенклатура в строке
//                   с индексом 10 табличной части документа, в которой
//   				 произошла ошибка: ТабличнаяЧастьСоставДокумента[10].Номенклатура.
//   Отказ - Ссылка - ссылка на Отказ который присутствует в обработчиках объектов.
//
// Пример:
//	  МассивТекста = Новый Массив;
//	  МассивТекста.Добавить(""Привет сервер!"");
//	  МассивТекста.Добавить(""Это массив текста."");
//	  Сообщение = СтрСоединить(МассивТекста, ""-"");
//	  СообщитьПользователюНаКлиенте(Сообщение); = ""Привет сервер! - Это массив текста.""
//
&НаКлиенте
Процедура СообщитьПользователюНаКлиенте(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено, Знач Поле = """", Отказ = Ложь) Экспорт
 
 ОбщегоНазначенияСлужебныйКлиентСервер.СообщитьПользователюКлиентСервер(ТекстСообщенияПользователю, КлючДанных, Поле, Отказ);
 
КонецПроцедуры

#КонецОбласти

#Область СлужебнаяКлиентСерверная
// 3) Общая служебная клиент-серверная реализация в модуле ОбщегоНазначенияСлужебныйКлиентСервер:
//    Выводит сообщение на экран пользователя. (общий модуль с галочками: Сервер, ВызовСервера).
//
// Рекомендация использовать с:
//   СообщитьПользователюНаСервере, СообщитьПользователюНаКлиенте
//
// Зависимости:
//
//
// Параметры:
//   ТекстСообщенияПользователю - Строка - текст сообщения.
//   КлючДанных - Ссылка на объект, Ссылка на объект информационной базы,
//                к которому это сообщение относится, или ключ записи.
//   Поле - Строка - Содержит путь к реквизиту формы, для которого было
//                   выведено сообщение, или к данным объекта.
//                  (Например, путь к реквизиту Номенклатура в строке
//                   с индексом 10 табличной части документа, в которой
//   				 произошла ошибка: ТабличнаяЧастьСоставДокумента[10].Номенклатура.
//   Отказ - Ссылка - ссылка на Отказ который присутствует в обработчиках объектов.
//
// Пример:
//	  СообщитьПользователюКлиентСервер(Сообщение);
//
&НаСервере
Процедура СообщитьПользователюКлиентСервер(Знач ТекстСообщенияПользователю, Знач КлючДанных, Знач Поле, Отказ = Ложь, ЭтоОбъект = Ложь) Экспорт
 
 Сообщение = Новый СообщениеПользователю;
 Сообщение.Текст = ТекстСообщенияПользователю;
 Сообщение.Поле = Поле;
 
 Если ЭтоОбъект Тогда
   Сообщение.УстановитьДанные(КлючДанных);
 Иначе
   Сообщение.КлючДанных = КлючДанных;
 КонецЕсли;
 
 Сообщение.Сообщить();
 Отказ = Истина;
 
КонецПроцедуры

#КонецОбласти

#КонецОбласти"}
},
{0,
{"ДинамическийВыводТаблицыЗначенийНаФорму",0,0,"ДинамическийВыводТаблицыЗначенийНаФорму_Кистанов","#Область ДинамическийВыводТаблицыЗначенийНаФорму
<?>
// На форме есть реквизит с Типом ТаблицаЗначений у которой не созданы колонки,
// необходимо программно на лету создавать колонки и заполнять произвольными данными.
//
// Рекомендация использовать с:
//   НовыйТаблицаЗначений, ОписаниеКолонокТаблицыЗначенийСтруктурой
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ИсточникДанных - ТаблицаЗначений - имя типа метаданный в единственном числе (Документ).
//   ЭтаФормаИмяПриемника - Строка - имя расположенной на форме таблицы значений (которой надо добавить колонки).
//   ЭлементыИмяПриемника - Строка - имя элемента формы путь к данных которого является ЭтаФормаИмяПриемника.
//
// Пример:
//   ВывестиТаблицуЗначенияВТаблицуНаФорме(Выборка.Выгрузить(), ""ТаблицаОстатки"", ""ЭлементТаблицаОстатки"");
//
&НаСервере
Процедура ВывестиТаблицуЗначенияВТаблицуНаФорме(ИсточникДанных, ЭтаФормаИмяПриемника, ЭлементыИмяПриемника = Неопределено)
	Если ЭлементыИмяПриемника = Неопределено Тогда
		ЭлементыИмяПриемника = ЭтаФормаИмяПриемника;
	КонецЕсли; 
	
	// Собирается инофрмация по добавленным ранее элементам формы и реквизитам, на которые элементы формы ссылаются.
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	Для каждого Эл Из Элементы[ЭлементыИмяПриемника].ПодчиненныеЭлементы Цикл
		УдаляемыеРеквизиты.Добавить(Эл.ПутьКДанным);
		УдаляемыеЭлементы.Добавить(Эл);
	КонецЦикла; 
	Для каждого Эл Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Эл);
	КонецЦикла; 
	
	// Добавляются колонки из ТаблицыЗначений в реквизит таблицы ЭтаФормаИмяПриемника
	НовыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из ИсточникДанных.Колонки Цикл
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ЭтаФормаИмяПриемника, Колонка.Заголовок);
	   	НовыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;

    //Удаляются старые и устанавливаются новые реквизиты
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	
    // Добавляются колонки из ТаблицыЗначений в элементы ЭлементыИмяПриемника со ссылкой на колонки в ЭтаФормаИмяПриемника
    Для Каждого Колонка Из ИсточникДанных.Колонки Цикл
        НовыйЭлемент = Элементы.Добавить( ЭтаФормаИмяПриемника + ""_"" + Колонка.Имя, Тип(""ПолеФормы""), Элементы[ЭлементыИмяПриемника]);
        НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи; //Или ПолеВвода, или что-то другое;
        НовыйЭлемент.ПутьКДанным = ЭтаФормаИмяПриемника + ""."" + Колонка.Имя;
    КонецЦикла;
 
 	// В созданный реквизит загружается ТЗ
	ЭтаФорма[ЭтаФормаИмяПриемника].Загрузить(ИсточникДанных);
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ОписаниеКолонокТаблицыЗначенийСтруктурой",0,0,"ОписаниеКолонокТаблицыЗначенийСтруктурой_Кистанов","#Область ОписаниеКолонокТаблицыЗначенийСтруктурой

// Зависимости:
//   Шаблоны - НовыйТаблицаЗначенийОбщая
//
// Массив Из Структур в ТаблицуЗначений
// 
// Возвращаемое значение:
//  ОписаниеКолонок - Массив Из Структура, описывает колонки Тбалицы значений.
//
&НаКлиенте
Функция ОписаниеКолонокТаблицыЗначенийСтруктурой<?ИмяСтруктуры>()
	ОписаниеКолонок = Новый Массив;
	
	ТипТип 			= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипИмя 			= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипСценарий 	= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипРоль 		= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипУровень 		= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипПревышает 	= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	
	КолонкаТип 			= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Тип"",       ТипТип,       ""Тип"", 		 Ложь, Неопределено);
	КолонкаИмя 			= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Имя"",       ТипИмя,       ""Имя"",    	 Ложь, Неопределено);
	КолонкаСценарий 	= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Роль"", 	  ТипСценарий,  ""Роль"", 	 Ложь, Неопределено);
	КолонкаРоль 		= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Сценарий"",  ТипРоль,      ""Сценарий"",  Ложь, Неопределено);
	КолонкаУровень 		= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Уровень"",   ТипУровень,   ""Уровень"",   Ложь, Неопределено);
	КолонкаПревышает 	= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Превышает"", ТипПревышает, ""Превышает"", Ложь, Неопределено);
	
	ОписаниеКолонок.Добавить(КолонкаТип);
	ОписаниеКолонок.Добавить(КолонкаИмя);
	ОписаниеКолонок.Добавить(КолонкаСценарий);
	ОписаниеКолонок.Добавить(КолонкаРоль);
	ОписаниеКолонок.Добавить(КолонкаУровень);
	ОписаниеКолонок.Добавить(КолонкаПревышает);
	
	Возврат ОписаниеКолонок;
КонецФункции

#КонецОбласти"}
},
{0,
{"Роль_ДоступнаБСП",0,0,"Роль_ДоступнаБСП_Кистанов","
#Область ГдеЛибоВКлиентскомКоде

&НаСервере
Процедура ПраваСпрПодразделения_ПередЗаписью(Отказ)
		
	РольСпрПодразделения 		= Метаданные.Роли.ПраваСпрПодразделения_ОсновнаяРоль;
	РольАдминистраторСистемы 	= Метаданные.Роли.АдминистраторСистемы;
	Пользователь 				= Пользователи.ТекущийПользователь();
	мИменаРолей					= Новый Массив;
	
	мИменаРолей.Добавить(РольСпрПодразделения.Имя);
	мИменаРолей.Добавить(РольАдминистраторСистемы.Имя);
	
	РольПраваСпрПодразделения_ОсновнаяРольЕсть = ПраваСпрПодразделения_Роль.ДоступнаПользователю(мИменаРолей, Пользователь);
	
	// задача 25 с crm +++
	Если РольПраваСпрПодразделения_ОсновнаяРольЕсть Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(""В связи с тем, что справочник может корректироваться в нескольких системах доступ ограничен!"");
	Отказ = Истина;
	// задача 25 с crm ---
	
КонецПроцедуры

#КонецОбласти

#Область ОбщийМодуль_Сервер_И_ВызовСервера

Функция ДоступнаПользователю(мИменаРолей, Пользователь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль
		|ПОМЕСТИТЬ ПрофилиПользователя
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &Пользователь
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыДоступаПользователи.Ссылка.Профиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрофилиПользователя.Профиль КАК Профиль,
		|	ПрофилиГруппДоступаРоли.Роль КАК Роль
		|ИЗ
		|	ПрофилиПользователя КАК ПрофилиПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ПрофилиПользователя.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|ГДЕ
		|	ПрофилиГруппДоступаРоли.Роль.Имя В (&мИменаРолей)"";
	
	Запрос.УстановитьПараметр(""мИменаРолей"", 	мИменаРолей);
	Запрос.УстановитьПараметр(""Пользователь"", 	Пользователь);		
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();

КонецФункции // ДоступнаПользователю()

#КонецОбласти"}
}
},
{6,
{"ЗапросЗапроса",1,0,"",""},
{0,
{"НовыйЗапрос",0,0,"НовыйЗапрос_Кистанов","#Область НовыйЗапрос
<?>
// Банальное создание объекта Запрос, но в одном месте, а не повторяясь.
//
// Рекомендация использовать с:
//   НовыйПараметры, ТекстЗапроса, УстановитьПараметрыЗапрос
//
// Зависимости:
//   Шаблоны - УстановитьПараметрыЗапрос
//
// Параметры:
//   текстЗапроса - Строка - наименование обк метаданных (РеализацияТоваровУслуг).
//   ПараметрыЗапрос - Массив Из из Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - Не обязательный, только для программно сформированного запроса, 
//                        для раздела ГДЕ в запросе и содержит фиксированный набор условий (""="", ""<>"", ""В"", ""Подобно"").
//   менеджерВТ - Массив Из Строка - поля выборки запроса (Ссылка,Номер,Дата).
//
// Возвращаемое значение:
//   Запрос - Запрос
//
// Пример:
//   Запрос = НовыйЗапрос(ПараметрыЗапросНоменклатура, текстЗапросаНоменклатура);
//
&НаСервереБезКонтекста
Функция НовыйЗапрос(текстЗапроса = неопределено, ПараметрыЗапрос = Неопределено, менеджерВТ = Неопределено)
    Запрос = Новый Запрос;
	
	Если ПараметрыЗапрос <> Неопределено Тогда
		УстановитьПараметрыЗапрос(Запрос, ПараметрыЗапрос);	
	КонецЕсли;	
	
	Запрос.Текст = ?(текстЗапроса = Неопределено, Запрос.Текст, текстЗапроса);
	
	Если менеджерВТ <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = менеджерВТ;
	КонецЕсли;
	
    Возврат Запрос;
КонецФункции

#КонецОбласти"}
},
{0,
{"ТекстЗапроса",0,0,"ТекстЗапроса_Кистанов","#Область ТекстЗапроса
<?>
// Рекомендация использовать с:
//   НовыйЗапрос
//
// Возвращаемое значение:
//   ТекстЗапроса - Строка - описание запроса.
//
// Пример:
//   текстЗапросаНоменклатура = ТекстЗапросаНоменклатура();
//
&НаСервереБезКонтекста
Функция ТекстЗапроса<?""ИмяЗапроса"">()
	ТекстЗапроса = """";
	
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти"}
},
{0,
{"ТекстЗапросаПрограммно",0,0,"ТекстЗапросаПрограммно_Кистанов","#Область ТекстЗапросаПрограммно
<?>
// Банальное создание объекта Запрос, но в одном месте, а не повторяясь.
//
// Рекомендация использовать с:
//   НовыйЗапрос, НовыйПараметры, УстановитьПараметрыЗапрос
//
// Параметры:
//   ТипОбк - Строка - имя типа метаданный в единственном числе (Документ).
//   ИмяОбк - Строка - наименование обк метаданных (РеализацияТоваровУслуг).
//   ВыбратьРеквизиты - Массив Из Строка
//     * Элемент - Строка - Наименование ""колонки"" в выборке, будет добавлена в массив структур.
//   ПараметрыГде - Массив Из из Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - всегда содержит фиксированный ключ ""условие"", 
//                          для раздела ГДЕ в запросе (""="", ""<>"", ""В"", ""Подобно"")
//   ПервыеКол - Число - если больше нуля тогда будет добавлено ключевое слово ПЕРВЫЕ знч.
//
// Возвращаемое значение:
//   текстЗапроса - Строка
//
// Пример:
//   ТекстЗапросаНоменклатура = ТекстЗапросаПрограммно(""Справочник"", ""Номенклатура"", ВыбратьРеквизиты, ПараметрыНоменклатура);
//
&НаСервереБезКонтекста
Функция ТекстЗапросаПрограммно(ТипОбк, ИмяОбк, ВыбратьРеквизиты, ПараметрыГде = Неопределено, ПервыеКол = 0)
	секцияЧто = """";
	секцияИЗ  = "" ИЗ "" + ТипОбк + ""."" + ИмяОбк + "" "" + Символы.ПС;
	секцияГДЕ = """";
	
	Для каждого реквизит Из ВыбратьРеквизиты Цикл
		секцияЧто = секцияЧто + ?(ЗначениеЗаполнено(секцияЧто), "", "", """") + реквизит + "" "" + Символы.ПС;
	КонецЦикла;
	секцияЧто = Символы.ПС + "" "" + ?(ЗначениеЗаполнено(секцияЧто), секцияЧто, "" * "");
		
	Если ПараметрыГде <> Неопределено Тогда
		Для каждого текПараметр Из ПараметрыГде Цикл
			
			ЕстьУсловие = ?(текПараметр.условие = Неопределено, Ложь, Истина);
			этоУсловиеВ = ?(ЕстьУсловие, СтрНайти(текПараметр.условие, ""В""), Ложь);
			условие		= ?(этоУсловиеВ, текПараметр.условие + "" (&"" + текПараметр.имя + "") "", "" &"" + текПараметр.имя);
			
			секцияГДЕ = секцияГДЕ + ?(ЗначениеЗаполнено(секцияГДЕ), "" И "", """") + текПараметр.имя + "" "" + условие + Символы.ПС;
		КонецЦикла;
		секцияГДЕ = Символы.ПС + ?(ЗначениеЗаполнено(секцияГДЕ), "" ГДЕ "" + секцияГДЕ, "" "");
	КонецЕсли;	
	
	текстЗапроса =
	""ВЫБРАТЬ "" + ?(ПервыеКол > 0, ""Первые "" + Строка(ПервыеКол) + "" "", "" "") + "" "" +
	секцияЧто  + "" "" + 
	секцияИЗ   + "" "" + 
	секцияГДЕ;
	
	Возврат текстЗапроса;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйПараметры",0,0,"НовыйПараметры_Кистанов","#Область НовыйПараметры
// Универсальный формат параметров используемых во всех методах шаблона.
// Для списка значений необходимо использовать массив как значение ключа ""знч""
//
// Рекомендация использовать с:
//   НовыйЗапрос, УстановитьПараметрыЗапрос, ТекстЗапросаПрограммно, ПреобразоватьВыборкуВJSON
//
// Возвращаемое значение:
//   параметрыМассив - Массив ИЗ Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - Не обязательный, только для программно сформированного запроса, 
//                        для раздела ГДЕ в запросе и содержит фиксированный набор условий (""="", ""<>"", ""В"", ""Подобно"").
//
//	ВНИМАНИЕ: Если использовать шаблон ""ВыборкуВJSON"" Тогда через структуру массива ""параметрыМассив""
//     можно задать набор реквизитов которые будут добавлены в JSON (тем самым исключив из JSON ненужные),
//	а в ""ТекстЗапросаПрограммно"" можно указать набор выбираемых реквизитов. Для этого необходимо использовать
//	ключ структуры ""РеквизитыИмя"", а значения Строка разделенная запятой, пример:
//              ПараметрКодНоменклатуры.Вставить(""имя"", ""РеквизитыИмя"");
//		   ПараметрКодНоменклатуры.Вставить(""имя"", ""Код,Наименование"");
//	В итоге в выборку будет добавлена ""колонка"" со значением ""Код,Наименование"".
//
// Пример:
//   ТекстЗапросаНоменклатура = ТекстЗапросаПрограммно(""Справочник"", ""Номенклатура"", ВыбратьРеквизиты, ПараметрыНоменклатура);
//
&НаКлиенте
Функция НовыйПараметры<?""ИмяПараметров"">()
	параметрыМассив = Новый Массив;
	
	<?>
	//СписокЗначенийКодНоменклатуры = Новый Массив;
	//СписокЗначенийКодНоменклатуры.Добавить(""УТ-00001995"");
	//СписокЗначенийКодНоменклатуры.Добавить(""УТ-00001996"");
	//СписокЗначенийКодНоменклатуры.Добавить(""УТ-00002021"");	
	//
	//ПараметрКодНоменклатуры = Новый Структура;
	//ПараметрКодНоменклатуры.Вставить(""имя"", ""Коды"");
	//ПараметрКодНоменклатуры.Вставить(""знч"", СписокЗначенийКодНоменклатуры);
	//ПараметрКодНоменклатуры.Вставить(""условие"", ""В"");	
	
	//параметрыМассив.Добавить(ПараметрКодНоменклатуры);
	
	Возврат параметрыМассив;
КонецФункции

#КонецОбласти"}
},
{0,
{"УстановитьПараметрыЗапрос",0,0,"УстановитьПараметрыЗапрос_Кистанов","#Область УстановитьПараметрыЗапрос
<?>
// Используя массив структур динамически устанавливаются параметры запроса, что позволяет
// не дублируя код использовать данную процедуру в одном мести для всех запросов.
//
// Рекомендация использовать с:
//   НовыйЗапрос, НовыйПараметры, ТекстЗапроса
//
// Параметры:
//   Запрос - Запрос
//   ПараметрыЗапрос - Массив Из из Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - Не обязательный, только для программно сформированного запроса, 
//                        для раздела ГДЕ в запросе и содержит фиксированный набор условий (""="", ""<>"", ""В"", ""Подобно"").
//
// Пример:
//   УстановитьПараметрыЗапрос(ЗапросНоменклатура, ПараметрыЗапросаНоменклатура);
//
&НаСервереБезКонтекста
Процедура УстановитьПараметрыЗапрос(Запрос, ПараметрыЗапрос)
	Для Каждого парам Из ПараметрыЗапрос Цикл
		Запрос.УстановитьПараметр(парам.Имя, парам.Знч);
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти"}
},
{4,
{"ТекстЗапроса",1,0,"",""},
{0,
{"ТаблицуЗначенийПоместитьВТТаблицаЗначений",0,0,"ТаблицуЗначенийПоместитьВТТаблицаЗначений_Кистанов","#Область ТаблицуЗначенийПоместитьВТТаблицаЗначений
<?>
// Использовать с шаблоном: ""ТекстЗапроса""
// Можно поместить в менеджер временных таблиц

""ВЫБРАТЬ
|	ДанныеТаблицыЗначений.*
|	ПОМЕСТИТЬ ВТТаблицаЗначений
|ИЗ
|	&ТабЗначений КАК ДанныеТаблицыЗначений""

параметрыЗапроса.Добавить( Новый Структура(""имя,знч"", ""ТабЗначений"", <?""перемТабЗнач"">) );

#КонецОбласти"}
},
{0,
{"РазворотШахматкиВОднуСтроку",0,0,"РазворотШахматкиВОднуСтроку_Кистанов","#Область РазворотШахматкиВОднуСтроку
<?>
// Использовать с шаблоном: ""ТекстЗапроса""

""ВЫБРАТЬ
	<? ""ИмяИсточника"">.<? ""ИмяОбщегоПоляДляГруппировки"">,
    МАКСИМУМ(ВЫБОР 
    	КОГДА <? ""ИмяИсточника"">.Код = ""1"" Тогда
        	<? ""ИмяИсточника"">.Значение
		КОНЕЦ) КАК Знач1Ресурс,
    МАКСИМУМ(ВЫБОР 
    	КОГДА <? ""ИмяИсточника"">.Код = ""2"" Тогда
        	<? ""ИмяИсточника"">.Значение
		КОНЕЦ) КАК Знач2Ресурс,
    МАКСИМУМ(ВЫБОР 
    	КОГДА <? ""ИмяИсточника"">.Код = ""3"" Тогда
        	<? ""ИмяИсточника"">.Значение
		КОНЕЦ) КАК Знач3Ресурс
 ИЗ
	<? ""ИмяИсточника""> КАК <? ""ИмяИсточника"">
 СГРУППИРОВАТЬ ПО
	<? ""ИмяИсточника"">.<? ""ИмяОбщегоПоляДляГруппировки"">"";	

// Исходные данные:
// а 1 0 0
// а 0 2 0
// а 0 0 3
// Результат:
// а 1 2 3

#КонецОбласти"}
},
{0,
{"ШахматкаГдеСложениеСледующего",0,0,"ШахматкаГдеСложениеСледующего_Кистанов","// Задача: Увеличить знч ""СчетчикНаНачало"" каждой строки
// на знч поля ПробегЗаПериод предыдущей строки
// (исключение первая строка знч которой первичное для всех строк)
//
// Пример:
//
// Входные данные:
// ТЧ.Стр1 - СчетчикНаНачало - ПробегЗаПериод
//    1	         142,782	       18.3       // на бензине
//    2	         142,782	       301.7      // на дизеле
//
// Выходные данные:
// ТЧ.Стр1 - СчетчикНаНачало - ПробегЗаПериод
//      1	     142,782	       18.3       // на бензине
//      2	     142,800.3	       301.7      // на дизеле
//
// Подробней:
// ТЧ.Стр1; СчетчикНаНачало                        ; ПробегЗаПериод
// ТЧ.Стр2; (СчетчикНаНачало + Стр1.ПробегЗаПериод); ПробегЗаПериод
//
///////////////////////////////////////////////////////////////////////////////////
// см. ""РазворотШахматкиВОднуСтроку"" ... получаем развернутую таблицу
//
// Было до разворота:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегЗаПериод:18.3
//   Стр2 - ПоказанияСчетчикаНаНачало:142782 - ПробегЗаПериод:301.7
//
// Стало после разворота в ШАХМАТКУ (две строки в одну):
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//
///////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	142782 КАК ПоказанияСчетчикаНаНачало,
	18.3   КАК ПробегСтроки1,
	301.7  КАК ПробегСтроки2
    ПОМЕСТИТЬ ВТТаблицаСДанными
;

///////////////////////////////////////////////////////////////////////////////////
// Создаем виртуальную таблицу с двумя записями
// (две записи пото му что у нас два вида топлива/только две строки в ТЧ.ГСМ)
//
// Это позволит задвоить развернутую шахматкой таблицу в одну строку
// (задвоить - потому что, у нас два вида топлива/только две строки в ТЧ.ГСМ)
//
// Пример:
// Будут входные данные:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//
// Будут выходные данные (задвоение) когда мы соединим с этой виртуальной Таблицей:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//   Стр2 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
///////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	1 КАК КодТоплива
    ПОМЕСТИТЬ ВТКодыТоплива
	
Объединить  

ВЫБРАТЬ
	2 КАК КодТоплива
;

///////////////////////////////////////////////////////////////////////////////////
// Соединяем ПО Истина что бы задвоить записи
// (задвоить записи пото му что, у нас два вида топлива/только две строки в ТЧ.ГСМ)
//
// Пример соединения (для задвоения):
// Входные данные:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//
// Вудут выходные данные (задвоение) когда мы соединим с этой виртуальной Таблицей:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//   Стр2 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//
// И этим же шагом производим операцию сложения ""СчетчикНаНачало"" +	""ПробегЗаПериод""
// для каждой следующей строки (первую строку в соответствии с услловием - не меняем)
//
// А также оставляем одно поле ""ПробегСтроки"" для каждой строки с соответствующим знч
// (для бензина знч из ""ПробегСтроки1"", а для дизеля знч из ""ПробегСтроки2"")
//
//
// Пример (полный результат):
// Входные данные:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
// 
// Результат:
//   КодТоплива	  СчетчикНаНачало	  ПробегЗаПериод
//        1	         142,782	          18.3
//        2	         142,800.3	          301.7
//
// (""СчетчикНаНачало"" у второй записи - увеличился на 18.3 (знч первой записи))
///////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ 
    КодТоплива, 
	ВЫБОР когда КодТоплива = 1 тогда
		ТаблицаСДанными.ПоказанияСчетчикаНаНачало
	Иначе 
		ТаблицаСДанными.ПоказанияСчетчикаНаНачало + ТаблицаСДанными.ПробегСтроки1 
	Конец КАК СчетчикНаНачало,
		
	ВЫБОР когда КодТоплива = 1 тогда
		ТаблицаСДанными.ПробегСтроки1
	Иначе 
		ТаблицаСДанными.ПробегСтроки2 
	КОНЕЦ КАК ПробегЗаПериод	
ИЗ 
    ВТТаблицаСДанными КАК ТаблицаСДанными
    ВНУТРЕННЕЕ Соединение ВТКодыТоплива
	ПО ИСТИНА"}
},
{0,
{"НайтиСвязанныеДокументыЧерезКритерииОтбора",0,0,"НайтиСвязанныеДокументыЧерезКритерииОтбора_Кистанов","// Найдет все документы котороые связанны с  указанным в параметре запроса
ВЫБРАТЬ
	СвязанныеДокументы.Ссылка
ИЗ
   	КритерийОтбора.СвязанныеДокументы(&Документ) КАК СвязанныеДокументы
ГДЕ
    СвязанныеДокументы.Ссылка.Проведен"}
}
}
},
{9,
{"HTTP",1,0,"",""},
{0,
{"HTTPHelp",0,0,"","////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИЯ Apache (https://infostart.ru/1c/articles/646384/):
//
// Скачиваем установщик (х32) со страницы официального сайта 
// https://archive.apache.org/dist/httpd/binaries/win32/
// (файл для скачивания httpd-2.2.25-win32-x86-no_ssl.msi)
// ИЛИ тут: https://www.apachelounge.com/download/
// 
// Не рекомендую использовать 64-битную 1С, потому как,
// с высокой степенью вероятности, возникнут гигантские сложности
// при подключении торгового оборудования, или каких-то других сторонних библиотек.
//
// Установить cd C:\Apache24\bin> httpd -k install
// Удаление службы cd C:\Apache24\bin> httpd -k uninstall
//
// ВНИМАНИЕ: после установки необходимо в C:\Apache24\conf\httpd.conf
// отредактировать строку:
// LoadModule _1cws_module ""C:/Program Files/1cv8/8.3.9.2016/bin/wsap24.dll.
//
// ВНИМАНИЕ:   ДЛЯ   ПУБЛИКАЦИИ   ПРИЛОЖЕНИЕ 1С ЗАПУСКАТЬ   ПОД   АДМИНСКИМИ ПРАВАМИ!
// (при публикации я снял галочку ""Публиковать HTTP сервисы по умолчанию"")
//
// ВНИМАНИЕ:   ПОСЛЕ   ПУБЛИКАЦИИ   НЕОБХОДИМО   ПЕРЕЗАПУСТИТЬ   APACHE!
//
// ! Возможно необходимо дать разрешение на папку Apache пользователю USER1CV8 
//
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//
// формула url:
//   http:// АлиасСервера / ИмяПубликации /hs/ КорневойURL / Шаблон(он же ШаблонURL)
//   Пример: http://localhost/umac/hs/um/workers/
//
//       ИмяПубликации - Имя, задается во время публикации на веб сервер
//       hs - ключевое слово 1С (означает http servic)
//       um - Корневой URL, ОбъектHTTP > Закладка ""Основное"" > КорневойURL
//       Шаблон - ШаблонURL, http url у ОбъектHTTP. У данного шаблона може
//       быть нужное количество обработчиков (они же методы GET, POST, PUT, DELETE и т.д.)
//       (обработчики срабатывают автоматом в зависимости от типа входящего запроса)
//
//    Получается что, ИМЯ которое используется в url: 
//    ""ПубликацияНаВебСервере"".Имя, ОбъектHTTP.КорневойURL и ОбъектHTTP.ШаблонURL
//    ,а ОбъектHTTP.ШаблонURL.Метод - это то что автоматически выбирает платформа 1С (имя не важно)
//
////////////////////////////////////////////////////////////////////////////////////////
//
// Обработчик http запроса методом GET
// ""НовыйШаблонURLПолуить"" - обработчик универсальный для всех шаблонов,
// например: создаем метод HTTP, у него создаем шаблон, этому шаблону
// создаем обработчик (где используем наш универсальный шаблон):
//     ""НовыйШаблонURLПолуитьНоменклатуру"",
//     в шаблоне реализуем получение данных (это может быть Строка или ДвоичныеДанные)
//     с двоичными данными все понятно, а Строка - это может быть выборка преобразованая
//	   в JSON, XML или так и остаться строкой. (шаблон преобразования ""ПреобразоватьВыборкуВJSON"")
//
//
// Обработчик http запроса методом POST
// ""НовыйШаблонURLРедактировать"" - обработчик универсальный для всех шаблонов,
// например: создаем метод HTTP, у него создаем шаблон, этому шаблону
// создаем обработчик (где используем наш универсальный шаблон):
//     ""НовыйШаблонURLПолуитьНоменклатуру"",
//     в шаблоне реализуем получение данных (это может быть Строка или ДвоичныеДанные)
//     с двоичными данными все понятно, а Строка - это может быть выборка преобразованая
//	   в JSON, XML или так и остаться строкой. (шаблон преобразования ""ПреобразоватьВыборкуВJSON"")
//
//
// ТО что увидить пользователь на web странице выполнив какой либо http запрос
// ""НовыйОтветПользователюHTTP"" - это ответ который получит пользователь на выполненый (url) запрос
// (то что отобразиться на его странице (или то что получит в программный ответ) это может быть файл
// для скачивания, может простой текст или в формате JSON, XML и т.д.)
//
//
// ПРОСТО создать прикладной объект в цикле
// СоздатьИзВнешнихДанных - просто создание прикладного объекта на основании массива структур
// данный шаблон создан просто для удобства (используется в шаблоне ""НовыйШаблонURLРедактировать"")
//
//
// КОГДА необходимо ПРОГРАММНО ПОСЛАТЬ HTTP запрос какому либо HTTP серверу
// ""НовыйHTTPСоединение"" - передаем параметром алиас (ip) сервера HTTP
//
//
// ЕСЛИ необходимо ПРОГРАММНО ОПИСАТЬ url запроса HTTP
// ""НовыйHTTPЗапрос"" - описывает строку http запроса
//
//
// ЕСЛИ необходимо ПРОГРАММНО ВЫПОЛНИТЬ url запроса HTTP
// ""ВыполнитьHTTP"" - выполняет http запроса, а также устанавливает тело запроса (Строку или ДвоичныеДанные)
//
//
// Выборку в JSON можно преобразовать используя шаблон ""ПреобразоватьВыборкуВJSON""
//
//"}
},
{0,
{"НовыйШаблонURLПолучить",0,0,"НовыйШаблонURLПолучить_Кистанов","#Область НовыйШаблонURLПолуить
<?>
// Предназначен исключительно для чтения из базы данных
// (HTTP-сервис в роли сервера обрабатывающего запросы)
// Обработчик HTTPМетода GET (который подчинен ШаблонуURL).
//
// Рекомендация использовать с:
//   НовыйЗапрос, НовыйВыборкаПоТипу, НовыйОтветПользователюHTTP
//
// Зависимости:
//   Шаблоны - НовыйОтветПользователюHTTP(желательно расположить в общем модуле),
//             ПреобразоватьВыборкуВJSON
//
// Параметры:
//   Запрос - HTTPСервисЗапрос - Описывает запрос к HTTP-сервису.
//   
//   Для получения пользовательских параметров запроса необходимо использовать:
//     Запрос.ПараметрыURL[""имяПараметра""]
//   Пример строки метода (шаблонаURL):
//     /getproductsByCode/{barcode}
//   Пример строки пользовательского запроса:
//     http://localhost/имяПубликации/hs/имяКаталогаПубликации/имяШаблона/знчПараметра
//     http://localhost/um/hs/umofas/getproductsByCode/000000001
//   
//
// Возвращаемое значение:
//   Ответ - Строка - строка в формате JSON
//
// Пример:
//   Создать объект ""HTTP-сервис, добавить ШаблонURL в котором 
//   создать HTTPМетода и его обработчику назначить этот метод;
//
Функция НовыйШаблонURLПолуить<?""ЧтоПолучить"">(Запрос)
	
	/////////////////////////////////////////////////////////////////////////////////
    // Выборка = ... КАК ОТДЕЛЬНЫЙ МЕТОД КОНКРЕТНОГО ПРИКЛАДНОГО ОБЪЕКТА +
	//Функция ПолучитьСписок(ПараметрыЗапроса) Экспорт	
	//    текстЗапроса = ТекстЗапросаСписокСотрудников();
	//    Запрос = ОбщегоНазначенияСервер.НовыйЗапрос(ПараметрыЗапроса, текстЗапроса);
	//    Выборка = Запрос.Выполнить().Выбрать();
	//    Возврат Выборка;
	//КонецФункции
    // КАК ОТДЕЛЬНЫЙ МЕТОД КОНКРЕТНОГО ПРИКЛАДНОГО ОБЪЕКТА -
	/////////////////////////////////////////////////////////////////////////////////
	
	Данные = ПреобразоватьВыборкуВJSON(Выборка, РеквизитыИмя);
	ТелоОтвета = Новый Структура(""ЭтоСтрока,Данные"", Истина, Данные);
	Ответ = НовыйОтветПользователюHTTP(ТелоОтвета);
	
    Возврат Ответ;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйШаблонURLРедактировать",0,0,"НовыйШаблонURLРедактировать_Кистанов","#Область НовыйШаблонURLРедактировать
<?>
// Предназначен для внесения изменений в базу данных
// (HTTP-сервис в роли сервера обрабатывающего запросы)
// Обработчик HTTPМетода POST (который подчинен ШаблонуURL).
//
// Рекомендация использовать с:
//   
//
// Зависимости:
//   Шаблоны - НовыйОтветПользователюHTTP, ПреобразоватьJSONВМассив, СоздатьИзВнешнихДанных 
//
// Параметры:
//   Запрос - HTTPСервисЗапрос - Описывает запрос к HTTP-сервису.
//   
//   Для получения пользовательских параметров запроса необходимо использовать:
//     Запрос.ПараметрыURL[""имяПараметра""]
//   Пример строки метода (шаблонаURL):
//     /getproductsByCode/{barcode}
//   Пример строки пользовательского запроса:
//     http://localhost/имяПубликации/hs/имяКаталогаПубликации/имяШаблона/знчПараметра
//     http://localhost/um/hs/umofas/getproductsByCode/000000001
//   
//
// Возвращаемое значение:
//   Ответ - Строка - строка в формате JSON
//
// Пример:
//   Создать объект ""HTTP-сервис, добавить ШаблонURL в котором 
//   создать HTTPМетода и его обработчику назначить этот метод;
//
Функция НовыйШаблонURLРедактировать<?""ЧтоРедактировать"">(Запрос)	
    СтрокаJSON       = Запрос.ПолучитьТелоКакСтроку();
	ДанныеМассив     = ПреобразоватьJSONВМассив(СтрокаJSON);
	кодОтвета        = ?(ДанныеМассив = Неопределено, 506, 200);	
	
	ОшибкаСоздания   = СоздатьИзВнешнихДанных(ДанныеМассив);
	кодОтвета        = ?(ОшибкаСоздания, 507, 200);	
    Ответ            = НовыйОтветПользователюHTTP(,кодОтвета);
	
    Возврат Ответ;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйОтветПользователюHTTP",0,0,"НовыйОтветПользователюHTTP_Кистанов","#Область НовыйОтветПользователюHTTP
<?>
// HTTP ответ для Обработчика HTTPМетода GET (который подчинен ШаблонуURL).
//
// Рекомендация использовать с:
//   НовыйШаблонURLПолучить, НовыйШаблонURLРедактировать
//
// Зависимости:
//   ТекущаяОбласть - ОписаниеОтветаHTTPПоКоду
//
// Параметры:
//   КодСостояния - Число - код ответа возврашаемый http сервером.
//   * ТелоОтвета - Структура:
//        ** ЭтоСтрока  - Булево - для условия установки тела HTTP запроса.
//        ** Данные     - Строка (JSON, XML, произвольная) ИЛИ ДвоичныеДанные
//                             (то что будет установлено в тело HTTP запроса).
//
// Возвращаемое значение:
//   Ответ - Строка - строка в формате JSON
//
// Пример:
//   НовыйОтветПользователюHTTP(Выборка, ""JSON"");
//
Функция НовыйОтветПользователюHTTP(ТелоОтвета = Неопределено, КодСостояния = 200)

	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	Если ТелоОтвета <> Неопределено Тогда
		
	    Если ТелоОтвета.ЭтоСтрока Тогда
			
		  Попытка
			  Ответ.УстановитьТелоИзСтроки(ТелоОтвета.Данные, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Использовать);			  
		  Исключение          
			  КодСостояния = 508;		      
		  КонецПопытки
		  
	    Иначе
		  
		  Попытка
			  Ответ.УстановитьТелоИзДвоичныхДанных(ТелоОтвета.Данные);
		  Исключение          
			  КодСостояния = 509;		      
		  КонецПопытки
		  
	    КонецЕсли;      	  
	  
	КонецЕсли;
	Ответ.КодСостояния = КодСостояния;
	
    Возврат Ответ;
КонецФункции

// Текст ОШИБКИ для ответа HTTP.
//
// Зависимости:
//   ТекущаяОбласть - НовыйОтветПользователюHTTP - Вызываемый
//
// Параметры:
//   КодСостояния - Число - код ответа возврашаемый http сервером.
//
// Возвращаемое значение:
//   Ответ - Строка - текст ошибки.
//
// Пример:
//   ОписаниеОтветаHTTPПоКоду(404) = ""Упс, ТелоОтвета не выбраны!"";
//
Функция ОписаниеОтветаHTTPПоКоду(КодСостояния)
    Ответ = """";

    ОписаниеОтвета = Новый Соответствие;
	ОписаниеОтвета.Вставить(200, ""ок"");
	ОписаниеОтвета.Вставить(404, ""Ошибка выборка не может быть пустой!"");
	ОписаниеОтвета.Вставить(500, ""Ошибка преобразования выборки в JSON!"");
	ОписаниеОтвета.Вставить(506, ""Ошибка преобразования JSON в массив структур!"");
	ОписаниеОтвета.Вставить(507, ""Ошибка неудалось создать объект!"");
	ОписаниеОтвета.Вставить(508, ""Ошибка установки тела запроса из Строка!"");
	ОписаниеОтвета.Вставить(508, ""Ошибка установки тела запроса из ДвоичныеДанные!"");
		
	ТекстНеНайден = ""Обработчик ошибки не найден :("";
	ТекстОтвета   = ОписаниеОтвета.Получить(КодСостояния);
	Ответ         = ?(ТекстОтвета <> Неопределено, ТекстОтвета, ТекстНеНайден);
	
    Возврат Ответ;
КонецФункции

#КонецОбласти"}
},
{0,
{"СоздатьИзВнешнихДанных",0,0,"СоздатьИзВнешнихДанных_Кистанов","#Область СоздатьИзВнешнихДанных
<?>
// Радактирование БД имея данные в формате СтрокаJSON.
//
// Рекомендация использовать с:
//   НовыйШаблонURLРедактировать
//
// Параметры:
//   ВнешниеДанные - Массив ИЗ Структура - Преобразованные данные строки в формата JSON.
//
// Возвращаемое значение:
//   ОшибкаСоздания - Булево - для формирования код ответа HTTP.
//
// Пример:
//   СоздатьИзВнешнихДанных(ВнешниеДанные);
//
Функция СоздатьИзВнешнихДанных<?""ЧтоСоздать"">(ВнешниеДанные)
	ОшибкаСоздания = ЛОЖЬ;
	
	Для Каждого данные Из ВнешниеДанные Цикл
		// обк = Справочники.ххх.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(обк, данные);
		Попытка
			обк.записать();
		Исключение
	  		ОшибкаСоздания = Истина;
	  		Прервать;
		КонецПопытки;
	КонецЦикла;	
		
	Возврат ОшибкаСоздания;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйHTTPСоединение",0,0,"НовыйHTTPСоединение_Кистанов","#Область НовыйHTTPСоединение
<?>
// для взаимодействия по протоколу HTTP.
//
// Рекомендация использовать с:
//   ВыполнитьHTTPЗапрос, НовыйHTTPЗапрос, НовыйСообщитьПользователю
//
// Зависимости:
//    Шаблон - НовыйСообщитьПольщователю (СообщитьПользователюНаКлиенте)
//
// Параметры:
//   АдресСервера - Строка - адрес или алиас сервера (""localhost"") где установлен Apatch 
//   или IIS и опубликован HTTP сервис 1С (в конфиг файле серверной машины можно указать алиас).
//
// Возвращаемое значение:
//   СоединениеHTTP - HTTPConnection - Предназначен для взаимодействия 
//   с внешними системами по протоколу HTTP, в т.ч. для передачи файлов.
//
// Пример:
//   ЛокальныйHTTPСервер = НовыйHTTPСоединение(""localhost"");
//
&НаКлиенте
Функция НовыйHTTPСоединение(АдресСервера)
	СоединениеHTTP = Неопределено;
	
	Попытка
		СоединениеHTTP = Новый HTTPСоединение(АдресСервера);
	Исключение		
		//Сообщение       = Новый СообщениеПользователю;
		//Сообщение.Текст = ОписаниеОшибки();
		//Сообщение.Сообщить();
		ошибка = ИнформацияОбОшибке();
		СообщитьПользователюНаКлиенте(ошибка);
		Возврат;
	КонецПопытки;
	
	Возврат СоединениеHTTP;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйHTTPЗапрос",0,0,"НовыйHTTPЗапрос_Кистанов","#Область НовыйHTTPЗапрос
<?>
// (HTTP-сервис в роли сервера обрабатывающего запросы)
// Обработчик HTTPМетода GET (который подчинен ШаблонуURL).
//
// Рекомендация использовать с:
//   ВыполнитьHTTPЗапрос, НовыйHTTPСоединение
//
// Зависимости:
//
//
// Параметры:
//   АдресРесурса - Строка - url ссылка (при необходимости с параметрами)
//   Тело запроса устанавливается отдельно шаблоном ""ВыполнитьHTTP"".
//
// Возвращаемое значение:
//   HTTPЗапрос - HTTPЗапрос - Предназначен для описания HTTP-запросов,
//   отправляемых через объект HTTPСоединение.
//
// Пример:
//   НовыйHTTPЗапрос(""/um/hs/umofas/setproduct/"");
//
&НаКлиенте
Функция НовыйHTTPЗапрос(АдресРесурса)
	HTTPЗапрос   = Неопределено;
	Заголовки    = Новый Соответствие;
	
	Заголовки.Вставить(""Content-Type"", ""text/plain;charset=UTF-8"");
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Возврат HTTPЗапрос;
КонецФункции

#КонецОбласти"}
},
{0,
{"ВыполнитьHTTP",0,0,"ВыполнитьHTTPЗапрос_Кистанов","#Область ВыполнитьHTTP
<?>
// Функция выполняет HTTP запрос на заданном сервере 
// и поддерживает исключительно два метода GET и POST.
//
// Рекомендация использовать с:
//   НовыйHTTPСоединение, НовыйHTTPЗапрос, ПреобразоватьВыборкуВJSON, НовыйСообщитьПольщователю
//
// Зависимости:
//    Шаблон - НовыйСообщитьПольщователю (СообщитьПользователюНаКлиенте)
//
// Параметры:
//   HTTPСоединение - HTTPConnection - для взаимодействия по протоколу HTTP.
//   HTTPЗапрос     - HTTPЗапрос - Предназначен для описания HTTP-запросов.
//   ТелоКакСтрока   - Строка - Содержит тело запроса в виде строки 
//                              (xml, JSON или произвольная строка).
//
// Возвращаемое значение:
//   ОтветСервера - HTTPОтвет - Предоставляет доступ к содержимому 
//   ответа HTTP-сервера на запрос.
//   В случае ошибки - функция вернет Неопределено!
//
// Пример:
//   ВыполнитьHTTP(HTTPСоединение, HTTPЗапрос, ВыборкаJSON)
//
&НаКлиенте
Функция ВыполнитьHTTP(HTTPСоединение, HTTPЗапрос, ТелоКакСтрока = Неопределено)
	МетодPOST    = ТелоКакСтрока <> Неопределено;
	ОтветСервера = Неопределено;
	
	Попытка
		
		
		
	    Если МетодPOST Тогда
	        HTTPЗапрос.УстановитьТелоИзСтроки(ТелоКакСтрока, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Использовать);
			ОтветСервера = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			ОтветСервера = HTTPСоединение.Получить(HTTPЗапрос);
		КонецЕсли;
		
		
		
	Исключение		
		//Сообщение       = Новый СообщениеПользователю;
		//Сообщение.Текст = ОписаниеОшибки();
		//Сообщение.Сообщить();
		ошибка = ИнформацияОбОшибке();
		СообщитьПользователюНаКлиенте(ошибка);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОтветСервера;	
КонецФункции

#КонецОбласти"}
},
{0,
{"NginxПроксиКакВходБезПароля",0,0,"NginxПроксиКакВходБезПароля_Кистанов","
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] ""$request"" '
    #                  '$status $body_bytes_sent ""$http_referer"" '
    #                  '""$http_user_agent"" ""$http_x_forwarded_for""';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       4000;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

#        location / {
#            root   html;
#            index  index.html index.htm;
#        }

# Все запросы идущие на um сервера 100 - будут перенаправлены на сервер 150 в папку публикации 1С
# Выполнив url: http://192.168.171.100:4000/um/hs/um/employee/ мы получим перенаправление на 150
# та часть которая идет после um будет подставленна к знч proxy то есть:
# http://192.168.171.100:4000/um/hs/um/employee/ => http://192.168.171.150/um/ + hs/um/employee/
# ( um стоящий перед hs - это каталог публикации 1C )
# где hs это зарезервированное слово, um (после hs) - это имя обк HTTP, employee - http метод
        location /um {
            proxy_pass http://192.168.171.150/um/;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            
            # ""Basic U2VydmljZVVzZXI6UjBtYXNoa2E="" - это пароль полученный программой postman
            proxy_set_header Authorization ""Basic U2VydmljZVVzZXI6UjBtYXNoa2E="";
            proxy_pass_header Authorization;
        }

        location /uat/ {
            proxy_pass http://192.168.171.150/uat/;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            
            # ""Basic U2VydmljZVVzZXI6UjBtYXNoa2E="" - это пароль полученный программой postman
            proxy_set_header Authorization ""Basic U2VydmljZVVzZXI6UjBtYXNoa2E="";
            proxy_pass_header Authorization;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}"}
}
},
{2,
{"ОбменДанными",1,0,"",""},
{0,
{"НовыйВебсервисОбработчикОбращенийСервер",0,0,"НовыйВебсервисОбработчикОбращенийСервер_Кистанов","#Область НовыйВебсервисОбработчикОбращенийСервер

// Это СЕРВЕР реагирующий на вызов

// ПРИМЕР ""Сервера"" (ws) принимающего параметр:
// 1. Создаем WS
// 2. Создаем метод и устанавливаем событие ""ПолучитьДанныеОтчета""
// 3. это событие описываем в модуле ws:
//
// Функция ПолучитьДанныеОтчета(ПараметрыОтчета)
//   Возврат ОбменДаннымиСобытияITExchangeService.ПолучитьДанныеОтчета(ПараметрыОтчета);
// КонецФункции

// ПолучитьДанныеОтчета(ПараметрыОтчета); - это метод в общем модуле

 
#Область ПрограммныйИнтерфейс

Функция ПолучитьДанныеОтчета(ПараметрыОтчета) Экспорт 
    Попытка
  		СтруктураРеквизитов = ЗначениеИзСтрокиВнутр(ПараметрыОтчета);
	  	  
	Исключение
	   Возврат ОписаниеОшибки();	
   	КонецПопытки;
   
	Возврат ""OK"";
КонецФункции

Функция ReportParamsWorkVehicle() Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить(""ОрганизацииИмя"");
	ПараметрыОтчета.Вставить(""ОрганизацииКод"");
	
	ПараметрыОтчета.Вставить(""ДатаНачалоСтр"");
	ПараметрыОтчета.Вставить(""ДатаКонецСтр"");
	
	ПараметрыОтчета.Вставить(""Наименование"");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#КонецОбласти"}
},
{0,
{"НовыйВебсервисИнициаторКлиент",0,0,"НовыйВебсервисИнициаторКлиент_Кистанов","#Область НовыйВебсервисИнициаторКлиент

// ЭТО может быть обработка, регламентное знч или еще что то.
&НаСервере
Процедура ПолучитьДанныеУАТНаСервере()
  
	ИмяСервера = ""http://192.168.88.203:8012/"";
	
	ИмяПубликации = ""uat"";	
	ИмяWS = ""ITExchangeService"";
    ПространствоИмен = ""http://www.itexchangeUAT.com"";
	
	WSОпределение = Новый WSОпределения(ИмяСервера + ИмяПубликации + ""/ws/"" + ИмяWS + "".1cws/?wsdl"");
	Прокси = Новый WSПрокси(WSОпределение, ПространствоИмен, ИмяWS, ИмяWS + ""Soap"");
	
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить(""Код"",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Код));
	СтруктураРеквизитов.Вставить(""Наименование"",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Наименование));
 	СтруктураРеквизитов.Вставить(""Родитель"",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Родитель.Наименование));
 	СтруктураРеквизитов.Вставить(""ЭтоГруппа"",ВыборкаДетальныеЗаписи.Ссылка.ЭтоГруппа);
	СтруктураРеквизитов.Вставить(""ГУИД"",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
	
	стрСтруктураРеквизитов = ЗначениеВСтрокуВнутр(СтруктураРеквизитов);	
	Результат = Прокси.ЗаписатьВидыРабот(стрСтруктураРеквизитов);
		
	Если Результат = ""OK"" Тогда
		ЗаписьЖурналаРегистрации(""ЗУП_УАТ.Синхронизация"", УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ВидыРаботСотрудников, ВыборкаДетальныеЗаписи.Ссылка,
		""запись ВидыРаботСотрудников синхронизирована с 1С УАТ"")
	Иначе
		ЗаписьЖурналаРегистрации(""ЗУП_УАТ.Синхронизация"", УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВидыРаботСотрудников, ВыборкаДетальныеЗаписи.Ссылка,
		Результат)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеУАТ(Команда)
	// Например команда формы
	ПолучитьДанныеУАТНаСервере();
КонецПроцедуры

#КонецОбласти"}
}
},
{1,
{"ВнешняяОбработкаОтчет",1,0,"",""},
{0,
{"ОписаниеВнешнейОбработкиОтчета",0,0,"ОписаниеВнешнейОбработкиОтчета_Кистанов","#Область ОписаниеВнешнейОбработкиОтчета	

Функция ПолучитьТаблицуКоманд()
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить(""Представление"", 			Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Идентификатор"", 			Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Использование"", 			Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""ПоказыватьОповещение"",	Новый ОписаниеТипов(""Булево""));
	Команды.Колонки.Добавить(""Модификатор"", 			Новый ОписаниеТипов(""Строка""));
	Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, 
	                                     ПоказыватьОповещение = Ложь, Модификатор = """")
										 
	НоваяКоманда 						= ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление 			= Представление; 
	НоваяКоманда.Идентификатор 			= Идентификатор;
	НоваяКоманда.Использование 			= Использование;
	НоваяКоманда.ПоказыватьОповещение 	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор 			= Модификатор;
	
КонецПроцедуры

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	
	// *********ДОПУСТИМЫЕ ВИДЫ Объектов:
	<?>// ПараметрыРегистрации.Вставить(""Вид"", ""ПечатнаяФорма"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""ЗаполнениеОбъекта"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""ДополнительныйОтчет"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""ДополнительнаяОбработка"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""СозданиеСвязанныхОбъектов"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""ПечатнаяФорма"");
	
	// *********КОГДА ПечатнаяФорма ИЛИ ДополнительныйОтчет ИЛИ ЗаполнениеОбъекта >
	// МассивНазначений = Новый Массив;
	// МассивНазначений.Добавить(""Документ.<?""ИмяДокумента"">"");
	// ПараметрыРегистрации.Вставить(""Назначение"", МассивНазначений);
	// *********КОГДА ПечатнаяФорма ИЛИ ДополнительныйОтчет ИЛИ ЗаполнениеОбъекта <
			
	ПараметрыРегистрации.Вставить(""Наименование"", 		НСтр(""ru = '<?""Синоним"">'""));
	ПараметрыРегистрации.Вставить(""Информация"", 		НСтр(""ru = '<?""Синоним"">'""));
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"",	Ложь);
	ПараметрыРегистрации.Вставить(""Версия"", 			""1.1.0.0"");
	
	//	ПараметрыРегистрации.Вставить(""ВерсияБСП"", ""1.2.1.4"");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
		
	ДобавитьКоманду(
	ТаблицаКоманд, 
	НСтр(""ru = '<?""Синоним"">'""), 
	
	
	// *********КОГДА ПечатнаяФорма >
	// *********ВАЖНО: Задаем имя печатной формы всегда с фиксированным префиксом - ""ПФ_MXL_""
	// ""ПФ_MXL_<?""Имя"">"", ""ВызовСерверногоМетода"", Истина, ""ПечатьMXL""
	// *********КОГДА ПечатнаяФорма <
	
	
	// *********КОГДА ДополнительнаяОбработка ИЛИ ДополнительныйОтчет >
	// ""<?""Имя"">"", ""ОткрытиеФормы"", Ложь, """"
	// *********КОГДА ДополнительнаяОбработка ИЛИ ДополнительныйОтчет < 
	
	
	// *********КОГДА ЗаполнениеОбъекта >
	// *********В обработке необходимо создать форму и код в ее модуле:
	// ********* &НаКлиенте Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив) Экспорт
	// ""<?""Синоним"">"", ""ВызовКлиентскогоМетода"", Истина
	// *********КОГДА ЗаполнениеОбъекта <
	
	
	);
	
	
	ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
КонецФункции

#КонецОбласти"}
}
},
{5,
{"ПроцессорКомпоновкиОтчета",1,0,"",""},
{0,
{"СхемаКомпоновкиДанныхОтчета",0,0,"СхемаКомпоновкиДанныхОтчета_Кистанов","#Область СхемаКомпоновкиДанныхОтчета
<?>
// Получить ""ОсновнаяСхемаКомпоновкиДанных"" любого ОТЧЕТА конфигурации по его имени.
//
// Рекомендация использовать с:
//   ЗапросСхемыКомпоновкиДанныхОтчета
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ИмяОтчета - Строка - имя любого отчета в конфигурации.
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных
//
// Пример:
//   СхемаКомпоновкиДДС = СхемаКомпоновкиДанныхОтчета(""ДвижениеДенежныхСредств"");
//
&НаСервереБезКонтекста
Функция СхемаКомпоновкиДанныхОтчета(ИмяОтчета)

	отчетКонфигурации 		= Отчеты[ИмяОтчета];
	СхемаКомпоновкиДанных 	= отчетКонфигурации.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

#КонецОбласти"}
},
{0,
{"ЗапросСхемыКомпоновкиДанныхОтчета",0,0,"ЗапросСхемыКомпоновкиДанныхОтчета_Кистанов","#Область ЗапросСхемыКомпоновкиДанныхОтчета
<?>
// Получить Запрос любой Схемы Компоновки Данных (запрос любого ОТЧЕТА конфигурации).
//
// Рекомендация использовать с:
//   СхемаКомпоновкиДанныхОтчета
//
// Параметры:
//   СхемаКомпоновкиДанных - ОсновнаяСхемаКомпоновкиДанных.
//   имяНабораДанных - Строка - имя набора данных описывающего запрос.
//
// Возвращаемое значение:
//   Запрос - Запрос
//
// Пример:
//   ЗапросОтчетаДДС = ЗапросСхемыКомпоновкиДанныхОтчета(СхемаКомпоновкиДДС, ""НаборДанных1"");
//
&НаСервереБезКонтекста
Функция ЗапросСхемыКомпоновкиДанныхОтчета(СхемаКомпоновкиДанных, имяНабораДанных)
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[имяНабораДанных].Запрос;
	Запрос = Новый Запрос(ТекстЗапроса);
	Для Каждого ПараметрЗапроса Из СхемаКомпоновкиДанных.Параметры Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Имя, ПараметрЗапроса.Значение);
	КонецЦикла;

	Возврат Запрос;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПоляЗапросаСхемыКомпоновкиДанных",0,0,"ПоляЗапросаСхемыКомпоновкиДанных_Кистанов","#Область ПоляЗапросаСхемыКомпоновкиДанных
<?>
// Получить имена полей (КОЛОНОК) Запроса любой Схемы Компоновки Данных (ОТЧЕТА).
//
// Рекомендация использовать с:
//   СхемаКомпоновкиДанныхОтчета, ПреобразоватьВыборкуВМассивСтруктур
//
// Параметры:
//   СхемаКомпоновкиДанных - ОсновнаяСхемаКомпоновкиДанных.
//   ИмяНабораДанных - Строка - имя набора данных описывающего запрос.
//
// Возвращаемое значение:
//   массивИмен - Массив из Строк
//
// Пример:
//   КолонкиЗапросаВОтчетеДДС = ЗапросСхемыКомпоновкиДанныхОтчета(СхемаКомпоновкиДДС, ""НаборДанных1"");
//
&НаСервереБезКонтекста
Функция ПоляЗапросаСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, ИмяНабораДанных)
	массивИмен = Новый Массив;
	
	Для каждого элемент Из СхемаКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Поля Цикл	
		массивИмен.Добавть(элемент.Поле);	
	КонецЦикла;
	
	Возврат массивИмен;

КонецФункции

#КонецОбласти"}
},
{0,
{"ПроцессорКомпоновкиДанныхОтчета",0,0,"ПроцессорКомпоновкиДанныхОтчета_Кистанов","#Область ПроцессорКомпоновкиДанныхОтчета
<?>
// ???.
//
// Рекомендация использовать с:
//   НовыйПараметры, ПроцессорКомпоновкиДанныхВТабличныйДокумент
//
// Зависимости:
//   ТекущаяОбласть - УстановитьЗначенияПараметров
//
// Параметры:
//   ИмяОтчета - Строка - имя любого отчета конфигурации.
//   ЗначенияПараметров - Массив из Структур - для формирования данного параметра
//   необходимо использовать функцию шаблона ""НовыйПараметры""
//
// Возвращаемое значение:
//   ПроцессорКомпоновки - ПроцессорКомпоновкиДанных
//
// Пример:
//   ОтчетДДС = ПроцессорКомпоновкиДанныхОтчета(""ДвижениеДенежныхСредств"", ЗначенияПараметров);
//
&НаСервереБезКонтекста
Функция ПроцессорКомпоновкиДанныхОтчета(ИмяОтчета, ЗначенияПараметров)

	отчетКонфигурации 		= Отчеты[ИмяОтчета];	
	СхемаКомпоновкиДанных 	= отчетКонфигурации.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	
	отчетКонфигурацииОбъект = отчетКонфигурации.Создать();
	ИсточникДоступныхНКД    = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	отчетКонфигурацииОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНКД);
	отчетКонфигурацииОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ПараметрыОтчета = отчетКонфигурацииОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	УстановитьЗначенияПараметров(ПараметрыОтчета, ЗначенияПараметров);
	
	Настройки = отчетКонфигурацииОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, Новый ДанныеРасшифровкиКомпоновкиДанных);
	
	ДанныеРасшифровкиОбъект =  Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровкиОбъект,Истина);

	
	Возврат ПроцессорКомпоновки;
	
КонецФункции

// Устанавливает значения &Параметров отчета.
//
// Рекомендация использовать с:
//   НовыйПараметры, ПроцессорКомпоновкиДанныхВТабличныйДокумент
//
// Параметры:
//   ПараметрыОтчета - Структура
//     * Элементы - Массив - параметры задаваемые в отчете (&период и т.д.)
//   ЗначенияПараметров - Массив из Структур - для формирования данного параметра
//   необходимо использовать функцию шаблона ""НовыйПараметры""
//
// Пример:
//   УстановитьЗначенияПараметров(Отчет1.КомпоновщикНастроек.Настройки.ПараметрыДанных, ЗначенияПараметров);
//
&НаСервереБезКонтекста
Процедура УстановитьЗначенияПараметров(ПараметрыОтчета, ЗначенияПараметров);

	итераторА = 0;
	Пока ЗначенияПараметров.Количество() > итераторА Цикл
		текПарам = ПараметрыОтчета.Элементы.Найти(ЗначенияПараметров[итераторА].имя);
		Если (текПарам = Неопределено) Тогда
			итераторА = итераторА + 1;
			Продолжить;
		КонецЕсли;
		текПарам.Значение = ЗначенияПараметров[итераторА].знч;
		текПарам.Использование = Истина;		
		
		итераторА = итераторА + 1;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ПроцессорКомпоновкиДанныхВТабличныйДокумент",0,0,"ПроцессорКомпоновкиДанныхВТабличныйДокумент_Кистанов","#Область ПроцессорКомпоновкиДанныхВТабличныйДокумент
<?>
//#Область ТочкаВхода
////ТабДокумент = Новый ТабличныйДокумент;
////ПараметрыОтчета = НовыйПараметры<?""ИмяЗапроса"">();
////Сформировать<?""имяОтчета"">(ТабДокумент, ПараметрыОтчета);
////ТабДокумент.Показать();
//#КонецОбласти

//&НаСервереБезКонтекста
//Процедура Сформировать<?""имяОтчета"">(ТабДокумент, ПараметрыОтчета)	
//	ИмяОтчета = <?""имяОтчета"">;
//	ПроцессорКомпоновки = ПроцессорКомпоновкиДанныхОтчета(ИмяОтчета, ПараметрыОтчета);	
//	ПроцессорКомпоновкиДанныхВТабличныйДокумент(ПроцессорКомпоновки, ТабДокумент);
//КонецПроцедуры



// Вывести данные Процессора компоновки (ОТЧЕТА) в табличный документ.
//
// Рекомендация использовать с:
//   ПроцессорКомпоновкиДанныхОтчета, НовыйПараметры
//
// Параметры:
//   ПроцессорКомпоновки - ПроцессорКомпоновкиДанных
//   ТабДокумент - ТабличныйДокумент
//
// Пример:
//   ПроцессорКомпоновкиДанныхВТабличныйДокумент(ОтчетДДС, ТабДокумент);
//
&НаСервереБезКонтекста
Процедура ПроцессорКомпоновкиДанныхВТабличныйДокумент(ПроцессорКомпоновки, ТабДокумент)

	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

КонецПроцедуры

#КонецОбласти"}
}
},
{19,
{"Основные",1,0,"",""},
{0,
{"НовыйВыборкаПоТипу",0,0,"НовыйВыборкаПоТипу_Кистанов","#Область НовыйВыборкаПоТипу
<?>
// &НаКлиенте
//
//ПараметрыЗапроса		        = Новый Массив;
//ВыбратьРеквизиты	            = Новый Массив;
//УсловиеОбходаПереопределяемый	= Новый Структура(""ДатаНачала,ДатаКонца,ТолькоОднуЗапись"", 
//                                                Дата(""00010101""), Дата(""00010101""), Истина);
//
//ПараметрЗапросаКод = Новый Структура(""имя,знч,условие"", ""Код"", ""000000001"", ""="");
//ПараметрыЗапроса.Добавить(ПараметрЗапросаКод);
//	
//ВыбратьРеквизиты.Добавить(""Ссылка"");
//ВыбратьРеквизиты.Добавить(""Дата"");

//массивСтруктур = НовыйВыборкаПоТипу(""Документ"", ""уатПутевойЛист"", ВыбратьРеквизиты, 
//                                    ПараметрыЗапроса, УсловиеОбходаПереопределяемый);



// Выбор любых объектов метаданных и необходимый перечень реквизитов,
// а также возможность указать условие выбора. (""Запрос формируемый программно"")
//
// Рекомендация использовать с:
//
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ТипОбк - Строка - имя типа метаданный в единственном числе (Документ).
//   ИмяОбк - Строка - наименование обк метаданных (РеализацияТоваровУслуг).
//   ВыбратьРеквизиты - Массив Из Строка - поля выборки запроса (Ссылка,Номер,Дата).
//   ПараметрыЗапроса - Массив Из из Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - всегда содержит фиксированный ключ ""условие"", 
//                          для раздела ГДЕ в запросе (""="", ""<>"", ""В"", ""Подобно"")
//   УсловиеОбходаПереопределяемый - Структура, ФиксированнаяСтруктура - в качестве ключ используется
//                                     знч на усмотрение пользователя так как пользователь должен
//                                     переопределить реализацию сравнения
//
// Возвращаемое значение:
//   Массив - Массив Из Структура, если выборка содержит данные и УсловиеОбходаПереопределяемый
//   не отсеяло все данные.
//
// Пример:
//   массивСтруктур = НовыйВыборкаПоТипу(""Документ"", ""уатПутевойЛист"", ВыбратьРеквизиты, 
//                                       ПараметрыЗапроса, УсловиеОбходаПереопределяемый);
//	
&НаСервереБезКонтекста
Функция НовыйВыборкаПоТипу(ТипОбк, ИмяОбк, ВыбратьРеквизиты, ПараметрыЗапроса, УсловиеОбходаПереопределяемый)
	текстЗапроса 		= ТекстЗапросаПрограммно(ТипОбк, ИмяОбк, ВыбратьРеквизиты, ПараметрыЗапроса);
	Запрос 				= НовыйЗапрос(текстЗапроса, ПараметрыЗапроса);	
	РезультатЗапроса 	= Запрос.Выполнить();	
	пустой 				= РезультатЗапроса.Пустой();
	массивСтруктур		= Новый Массив;
	
	Если НЕ пустой Тогда	
		Выборка   = РезультатЗапроса.Выбрать();
		ИтераторА = 0;
		Пока Выборка.Следующий() Цикл
			// УсловиеОбходаПереопределяемый >
			//Если УсловиеОбходаПереопределяемый.ДатаНачала >= Выборка.Дата И 
			//     УсловиеОбходаПереопределяемый.ДатаКонца <= Выборка.Дата Тогда
		    текущаяЗапись = Новый Структура;
		    текущаяЗапись.Вставить(""НомерСтроки"", ИтераторА + 1);
		    Для каждого реквизит Из ВыбратьРеквизиты Цикл
		        текущаяЗапись.Вставить(реквизит, Выборка[реквизит]);
		    КонецЦикла;
		    массивСтруктур.Добавить(текущаяЗапись);
			//	Если УсловиеОбходаПереопределяемый.ТолькоОднуЗапись Тогда
			//		Прервать;
			//	КонецЕсли;
			//КонецЕсли;
			// УсловиеОбходаПереопределяемый <
			
			ИтераторА = ИтераторА + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат массивСтруктур;
	
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйТаблицаЗначений",0,0,"НовыйТаблицаЗначений_Кистанов","#Область НовыйТаблицаЗначений

// Рекомендация использовать с:
//	Шаблон - ""ПреобразоватьСтруктуруВТаблицуЗначений""
//
// Параметры:
//   ОписаниеКолонок 	- Массив Из Структура - Описание колонок таблицы:
//   Имя 				- Строка 		   - Имя колонки.
//   Тип 				      - ОписаниеТипов - ""Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(15));"".
//   Заголовок 			- Строка 		   - Текс заголовка колонки.
//   СоставнойТип		- Булево 		   - Когда Тип колонки Составной.
//   Шрина     			- Число 		   - Ширина колонки на форме.
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
// Пример:
//	ОписаниеКолонок = Новый Массив;
//
//	ТипНомер = Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(15));
//
//	ТипДокумент = Новый Массив;
//	ТипДокумент.Добавить( Тип(""СправочникСсылка.Организация"") );
//	ТипДокумент.Добавить( Тип(""СправочникСсылка.Контрагент"") );
//
//	КолонкаНомер = Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Номер"",    ТипНомер,    ""Номер"",    Ложь,   Неопределено);
//	КолонкаДок 	 = Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Документ"", ТипДокумент, ""Документ"", Истина, Неопределено);
//
//  ОписаниеКолонок.Добавить(КолонкаНомер);
//  ОписаниеКолонок.Добавить(КолонкаДок);
//
//  тзНоменклатура 	= НовыйТаблицаЗначенийНоменклатура(ОписаниеКолонок);
//
&НаСервереБезКонтекста
Функция НовыйТаблицаЗначений<?""имяТЗ"">(ОписаниеКолонок) Экспорт
	ТабЗначений = Новый ТаблицаЗначений;	
	Для Каждого Описание Из ОписаниеКолонок Цикл
		ОписаниеТип = ?(Описание.СоставнойТип, Новый ОписаниеТипов(Описание.Тип), Описание.Тип);
		ТабЗначений.Колонки.Добавить(Описание.имя, ОписаниеТип, Описание.Заголовок, Описание.Ширина);
	КонецЦикла;
	
	//составнойТипДанных = Новый Массив;
	//составнойТипДанных.Добавить( Тип(""СправочникСсылка.Организация"") );
	//составнойТипДанных.Добавить( Тип(""СправочникСсылка.Контрагент"") );
	//ОписаниеСоставногоТипа = Новый ОписаниеТипов(составнойТипДанных);
	//ТабЗначений.Колонки.Добавить(""Субконто1"", ОписаниеСоставногоТипа, ""Получатель ТТН"");
	//
	//КвалификаторыСтроки = Новый КвалификаторыСтроки(15);
	//ОписаниеСтрокиИнвентарныйНомер = Новый ОписаниеТипов(""Строка"", ,КвалификаторыСтроки);
	//ТабЗначений.Колонки.Добавить(""ИнвентарныйНомер"", ОписаниеСтрокиИнвентарныйНомер, ""ИнвентарныйНомер"");
	
	Возврат ТабЗначений;
КонецФункции

#КонецОбласти"}
},
{0,
{"ВывестиВТабличныйДокумент",0,0,"ВывестиВТабличныйДокумент_Кистанов","<?>
#Область ВывестиВТабличныйДокумент

// Показать по быстрому массива структур в табличный документ, делал для внешних обработок.
// Получение массива структур остается за пользователем, данный код лишь выводит данные (с клиента).
//
// Рекомендация использовать с:
// 
//
// Зависимости:
//   ТекущаяОбласть - ЗаполнитьОбластьТабличногоДокумента, 
//                    ВывестиОбластьВТабличныйДокумент, ПолучитьМакетОбъектаНаСервере
//
// Пример:
//   ВывестиВТабличныйДокументНоменклатура();
//
&НаКлиенте
Процедура ВывестиВТабличныйДокумент<?""ЧтоВывести"">()
	табДок	= Новый ТабличныйДокумент;
	Макет	= ПолучитьМакетОбъектаНаСервере(""<?""имяМакета"">"");
	
	//параметрыЗапроса = НовыйПараметры<?""имя"">();
	//ДанныеВывода     = ПолучитьМассивСтруктурНаСервереБезКонтекста(<?""имяПараметраЗапроса"">);
	
	ВывестиОбластьВТабличныйДокумент(табДок,    Макет, ""Заголовок"");
	ВывестиОбластьВТабличныйДокумент(табДок,    Макет, ""ИмяДанных"");
	ЗаполнитьОбластьТабличногоДокумента(табДок, Макет, ""Данные"", ДанныеВывода);
	
	табДок.Показать(""Быстрый Макет"");
КонецПроцедуры

// Выводит в табличный документ указанную область макета с заполнением параметров
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   табДокумент - ТабличныйДокумент
//   Макет - Макет - содержит именованные области которые необходимо вывести в табличный документ.
//   имяОбласти - Строка - данная область обязана быть в макете.
//   ДанныеВывода - Массив Из из Структура:
//     * ключ структуры это имя параметра в макете.
//
// Пример:
//   ДанныеВывода = ЗаполнитьОбластьТабличногоДокумента(табДокумент, Макет, ""Данные"", МассивСтруктур);
//	
&НаСервереБезКонтекста
Процедура ЗаполнитьОбластьТабличногоДокумента(табДокумент, Макет, имяОбласти, ДанныеВывода)
	областьСсылка = Макет.ПолучитьОбласть(имяОбласти);
	
	ИтераторА = 0;
	Пока ИтераторА < ДанныеВывода.Количество() Цикл	
		областьСсылка.Параметры.Заполнить( ДанныеВывода[ИтераторА] );		
		табДокумент.Вывести(областьСсылка);		
		ИтераторА = ИтераторА + 1;
	КонецЦикла;
КонецПроцедуры

// Выводит в табличный документ указанную область макета БЕЗ заполнения параметров
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   табДокумент - ТабличныйДокумент
//   Макет - Макет - содержит именованные области которые необходимо вывести в табличный документ.
//   имяОбласти - Строка - данная область обязана быть в макете.
//
// Пример:
//   ДанныеВывода = ЗаполнитьОбластьТабличногоДокумента(табДокумент, Макет, ""Заголовок"");
//
&НаСервереБезКонтекста
Процедура ВывестиОбластьВТабличныйДокумент(табДокумент, Макет, имяОбласти)
	областьСсылка = Макет.ПолучитьОбласть(имяОбласти);
	табДокумент.Вывести(областьСсылка);
КонецПроцедуры

// Получить макет текущего объекта (например обработки)
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   имяМакета - Строка - имя Макет принадлежащего текущему объекту.
//
// Возвращаемое значение:
//   Макет - Макет
//
// Пример:
//   Торг13 = ПолучитьМакетОбъектаНаСервере(""торг13"");
//	
&НаСервере
Функция ПолучитьМакетОбъектаНаСервере(имяМакета)
	Возврат РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(имяМакета);
КонецФункции

#КонецОбласти"}
},
{0,
{"НайтиОбъектПоРеквизиту",0,0,"НайтиОбъектПоРеквизиту_Кистанов","#Область НайтиОбъектПоРеквизиту
<?>
// Поиск ПО Стандартным реквизитам НЕ_ПОДДЕРЖИВАЕТСЯ!
// Функция удобна тем что подходит для любого типа и объекта и использует метод пратформы ""НайтиПоРеквизиту""
//
// Рекомендация использовать с:
// 
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ТипОбк - Строка - имя типа метаданный в единственном числе (Документ).
//   ИмяОбк - Строка - наименование обк метаданных (РеализацияТоваровУслуг).
//   ИмяРеквизита - Строка
//   ЗначениеРеквизита - Либой
//   Родитель - Либой - необязательный
//   Владелец - Либой - необязательный
//
// Возвращаемое значение:
//   Любой - Объект который был найден или Неопределено
//
// Пример:
//   докРеализация = НайтиОбъектПоРеквизиту(""Документ"", ""РеализацияТоваровУслуг"", ""Организация"", ОрганизацияСсылка);
//
&НаСервереБезКонтекста
Функция НайтиОбъектПоРеквизиту(ТипОбк, ИмяОбк, ИмяРеквизита, ЗначениеРеквизита,
	                                                   Родитель = Неопределено, Владелец = Неопределено)
	менеджерОбк	= Новый (ТипОбк + ""Менеджер"");
    искомыйОбк  = Неопределено;
	
	Если Родитель = Неопределено И Владелец = Неопределено Тогда	
		искомыйОбк = менеджерОбк[ИмяОбк].НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита);
	ИначеЕсли Родитель <> Неопределено И Владелец = Неопределено Тогда
		искомыйОбк = менеджерОбк[ИмяОбк].НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, Родитель);
	Иначе
		искомыйОбк = менеджерОбк[ИмяОбк].НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, Родитель, Владелец);
	КонецЕсли;
	
	пустой 		= искомыйОбк = Неопределено ИЛИ искомыйОбк.Ссылка = менеджерОбк[ИмяОбк].ПустаяСсылка();
	результат 	= Новый Структура(""Пустой,Ссылка"", пустой, искомыйОбк.Ссылка);
	
	Возврат результат;
КонецФункции

#КонецОбласти"}
},
{0,
{"СодержитОдинаковыеДанные",0,0,"СодержитОдинаковыеДанные_Кистанов","#Область СодержитОдинаковыеДанные
<?>
// Поиск ПО Стандартным реквизитам НЕ_ПОДДЕРЖИВАЕТСЯ!
// Функция удобна тем что подходит для любого типа и объекта и использует метод пратформы ""НайтиПоРеквизиту""
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   Данные - Массив Из из Структура
//   Искомое - Массив Из из Структура
//   ОбластьПоиска - Массив Из из Строка:
//     * Элемент - Строка - сравнение исключительно по данным полям пропуская все остальные.
//
// Возвращаемое значение:
//   Булево - Истина, Ложь
//
// Пример:
//   существует = СодержитОдинаковыеДанные(мСтруктур1, мСтруктур2);
//	
&НаСервереБезКонтекста
Функция СодержитОдинаковыеДанные(Данные, Искомое, ОбластьПоиска = Неопределено)
	проверкаНеТребуетСравненияВсехПолей = ОбластьПоиска <> Неопределено;
	
	Для каждого обк Из Искомое Цикл
		равныхЗначений = Новый Массив;
		
		Для каждого знчСтруктуры Из обк Цикл
			
			// ограниченныйНаборПроверяемыхПолей +
			текущееПолеНеТребуетПроверки = ЛОЖЬ;            
			Если проверкаНеТребуетСравненияВсехПолей Тогда
			    текущееПолеНеТребуетПроверки = ОбластьПоиска.Найти(знчСтруктуры.Ключ) <> Неопределено;
			КонецЕсли;
			// ограниченныйНаборПроверяемыхПолей -
			
			Если Данные[знчСтруктуры.Ключ] = знчСтруктуры.Значение ИЛИ текущееПолеНеТребуетПроверки Тогда
				равныхЗначений.Добавить(Истина);
			КонецЕсли;						
		КонецЦикла;
		
		Если равныхЗначений.Количество() = обк.Количество() Тогда
			Возврат Истина;		
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьВыборкуВJSON",0,0,"ПреобразоватьВыборкуВJSON_Кистанов","#Область ПреобразоватьВыборкуВJSON
<?>
// Для реализации ответа HTTP сервиса. 
// Псевдонимы полей выборки должны соответствовать значению 
// так как используется ""ЗаполнитьЗначенияСвойств(РеквизитыИмя, Выборка)""
//
// Рекомендация использовать с:
//   НовыйОтветHTTPЗапроса, НовыйПараметры
//
// Параметры:
//   РеквизитыИмя - Строка - ОБЯЗАТЕЛЬНЫЙ, передаем фиксированную строку например ""Код,Наименование""
//   или РезультатЗапроса.Колонки.Найти(""РеквизитыИмя"") так как методом шаблона ""НовыйПараметры""
//   можно добавить в запрос колонку с именем ""РеквизитыИмя"" и знч перечислить поля (например:""Код,Наименование"").
//   
//    Если значение НЕ равно Неопределено Тогда Взять из Выборка.РеквизитыИмя.
//	Это значит что в запрос мы установили параметр ""РеквизитыИмя"" и задали знч строка, например:
//              ПараметрКодНоменклатуры.Вставить(""имя"", ""РеквизитыИмя"");
//		   ПараметрКодНоменклатуры.Вставить(""имя"", ""Код,Наименование"");
//
// Возвращаемое значение:
//   СтрокаJSON - Строка - строка в формате JSON
//
// Пример:
//   Вариант1: ПреобразоватьВыборкуВJSON(Выборка, ""barcode,code,name,article"");
//   Вариант2: ПреобразоватьВыборкуВJSON(Выборка, РезультатЗапроса.Колонки.Найти(""РеквизитыИмя""));
//
&НаСервере
Функция ПреобразоватьВыборкуВJSON(Выборка, РеквизитыИмя) Экспорт		
	Номенклатура = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если РеквизитыИмя = Неопределено Тогда
			// ВНИМАНИЕ: ""РеквизитыИмя"" передаем фиксированную строку
			// или передаем ""РезультатЗапроса.Колонки.Найти(""РеквизитыИмя"")""
			Продолжить;
		КонецЕсли;

		Реквизиты = Новый Структура(РеквизитыИмя);
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		Номенклатура.Добавить(Реквизиты);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Номенклатура);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьJSONВМассив",0,0,"ПреобразоватьJSONВМассив_Кистанов","#Область ПреобразоватьJSONВМассив
<?>
// Для реализации ответа HTTP сервиса.
//
// Рекомендация использовать с:
//   НовыйШаблонURLРедактировать, ПреобразоватьВыборкуВJSON
//
// Параметры:
//   СтрокаJSON - Строка - строка в формате JSON
//
// Возвращаемое значение:
//   ДанныеМассив - Массив Из Структура
//
// Пример:
//   ПреобразоватьJSONВМассив(СтрокаJSON);
//
Функция ПреобразоватьJSONВМассив(СтрокаJSON)	
	ДанныеМассив = Неопределено;
	
	ДанныеJSON = Новый ЧтениеJSON();
	Попытка
	  ДанныеJSON.УстановитьСтроку(СтрокаJSON);	
	  ДанныеМассив = ПрочитатьJSON(ДанныеJSON);
    Исключение
	  Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеМассив;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьВыборкуВМассивСтруктур",0,0,"ПреобразоватьВыборкуВМассивСтруктур_Кистанов","#Область ПреобразоватьВыборкуВМассивСтруктур
<?>
// Для передачи выборки с сервера на клиента или быстрой печати используя спец. метод из шаблона.
//
// Рекомендация использовать с:
//   СхемаКомпоновкиДанныхОтчета, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   Выборка - Коллекция ВыборкаЗапрос
//   ВыбратьРеквизиты - Массив Из Строка
//     * Элемент - Строка - Наименование ""колонки"" в выборке, будет добавлена в массив структур.
//   ДопУсловиеПереопределяемый - Структура, на усмотрение пользователя. Позволяет накладывать 
//   ПОСТ условие в момент обхода выборки
//
// Возвращаемое значение:
//   массив - массив из структур
//
// Пример:
//   массивСтруктур = ПреобразоватьВыборкуВМассивСтруктур(Выборка, мРеквизиты);
//
&НаСервереБезКонтекста
Функция ПреобразоватьВыборкуВМассивСтруктур(Выборка, ВыбратьРеквизиты, ДопУсловиеПереопределяемый = неопределено)
	массивСтруктур = Новый Массив;
	
	ИтераторА = 0;
	Пока Выборка.Следующий() Цикл
		//// Доп. условие >
		//Если ДопУсловиеПереопределяемый = неопределено 
		//     ИЛИ ДопУсловие.ДатаНачала >= Выборка.Дата И ДопУсловие.ДатаКонца <= Выборка.Дата Тогда
		текущаяЗапись = Новый Структура;
		текущаяЗапись.Вставить(""НомерСтроки"", ИтераторА + 1);
		Для каждого реквизит Из ВыбратьРеквизиты Цикл
			 текущаяЗапись.Вставить(реквизит, Выборка[реквизит]);
		КонецЦикла;
		массивСтруктур.Добавить(текущаяЗапись);
		//	Если ДопУсловие.ТолькоОднуЗапись Тогда
		//		Прервать;
		//	КонецЕсли;
		//КонецЕсли;
		//// Доп. условие <
		
		ИтераторА = ИтераторА + 1;
	КонецЦикла;
	
	Возврат массивСтруктур;
	
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьТабличнуюЧастьВМассивСтруктур",0,0,"ПреобразоватьТабличнуюЧастьВМассивСтруктур_Кистанов","#Область ПреобразоватьТабличнуюЧастьВМассивСтруктур
<?>
// Для передачи таблицы значений с сервера на клиента или быстрой печати используя спец. метод из шаблона.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабЧасть - Табличная часть, табличная часть (какого либо объекта)
//   именаКолонок - Массив Из Строк, строка - это имя колонки в табличной части
//
// Возвращаемое значение:
//   массивСтруктур - Массив Из Структур
//
// Пример:
//  именаКолонок = Новый Массив;
//  именаКолонок.Добавить(""Тип"");
//  именаКолонок.Добавить(""Имя"");
//  именаКолонок.Добавить(""Сценарий"");
// 
//  массивСтруктур = ПреобразоватьТабличнуюЧастьВМассивСтруктур(ТаблицаЗависимостей, именаКолонок);
//
&НаКлиенте
Функция ПреобразоватьТабличнуюЧастьВМассивСтруктур(ТабЧасть, именаКолонок = Неопределено)
 	
 	Если ТабЧасть.Количество() <= 0 ИЛИ именаКолонок = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ИтераторА = 0;
	массивСтруктур = Новый Массив(ТабЧасть.Количество());
	Для каждого э Из ТабЧасть Цикл
		Колонки = СтрСоединить(именаКолонок, "","");
		структураДанных = Новый Структура(Колонки);
		Для каждого колонкаИмя Из именаКолонок Цикл				
			структураДанных[колонкаИмя] = э[колонкаИмя];
		КонецЦикла;
		
		массивСтруктур[ИтераторА] = структураДанных;
		ИтераторА = ИтераторА + 1;
	КонецЦикла;
	
	Возврат массивСтруктур;

КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьТаблицуЗначенийВМассивСтруктур",0,0,"ПреобразоватьТаблицуЗначенийВМассивСтруктур_Кистанов","#Область ПреобразоватьТаблицуЗначенийВМассивСтруктур
<?>
// Для передачи таблицы значений с сервера на клиента или быстрой печати используя спец. метод из шаблона.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабЗначений - Коллекция таблица значений
//
// Возвращаемое значение:
//   массив - массив из структур
//
// Пример:
//   массивСтруктур = ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТабЗначений);
//
&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТабЗначений)
	
	Если ТабЗначений.Количество() <= 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
		
	именаКолонок = """";
	Для каждого колонка Из ТабЗначений.Колонки Цикл				
		именаКолонок = именаКолонок + ?(именаКолонок = """", """","","") + колонка.Имя;
	КонецЦикла;    
	
	ИтераторА = 0;
	массивСтруктур = Новый Массив(ТабЗначений.Количество());
	Для каждого э Из ТабЗначений Цикл
		структураДанных = Новый Структура(именаКолонок);
		Для каждого колонка Из ТабЗначений.Колонки Цикл				
			структураДанных[колонка.Имя] = э[колонка.Имя];
		КонецЦикла;
		
		массивСтруктур[ИтераторА] = структураДанных;
		ИтераторА = ИтераторА + 1;
	КонецЦикла;
	
	Возврат массивСтруктур;

КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьМассивСтруктурВТаблицуЗначений",0,0,"ПреобразоватьМассивСтруктурВТаблицуЗначений_Кистанов","#Область ПреобразоватьМассивСтруктурВТаблицуЗначений
<?>
// Вызывающая процедура или функция ""ВыполнитьПреобразованиеСтруктурыВТЗ""
//
&НаКлиенте
Процедура ВыполнитьПреобразованиеСтруктурыВТЗ()
	ОписаниеКолонок = ОписаниеКолонокТаблицыЗначенийСтруктурой();
	ПреобразоватьМассивСтруктурВТаблицуЗначений(мСтруктур, ОписаниеКолонок);
КонецПроцедуры

// Можно пробежать по Таб. документу на клиенте и создать массив из структура
// и передать на сервер без контекста где преобразовать в Таб. значений например
// для передачи в параметры запроса.
//
// Рекомендация использовать с:
//
// Зависимости:
//   Шаблоны        - НовыйТаблицаЗначенийОбщая
//   ТекущаяОбласть - ОписаниеКолонокТаблицыЗначенийСтруктурой
//
// Параметры:
//   Данные          - Массив из структура
//   ОписаниеКолонок - Массив Из Структура - Описание колонок таблицы
//
// Пример:
//   ПреобразоватьТаблицуЗначенийВМассивСтруктур(МассивСтруктур, ОписаниеКолонок) = ТаблицаЗначений.
//
&НаСервереБезКонтекста
Процедура ПреобразоватьМассивСтруктурВТаблицуЗначений(Данные, ОписаниеКолонок)
	ТабЗнач = НовыйТаблицаЗначенийОбщая(ОписаниеКолонок);
	Для Каждого э Из Данные Цикл
		строкаТЧ = ТабЗнач.Добавить();
		ЗаполнитьЗначенияСвойств(строкаТЧ, э);
	КонецЦикла;
	
	// ...	
КонецПроцедуры

#Область ОписаниеКолонокТаблицыЗначенийСтруктурой

//  Описание структуры назначенно в ""НаполнитьПодходящимиРолями"",
//	на текущий момент структура имеет вид:
//  Новый Структура(""Тип,Имя,Сценарий,Роль,Уровень,Превышает"").
//
// Зависимости:
//   Шаблоны - НовыйТаблицаЗначенийОбщая
// 
// Возвращаемое значение:
//  Результат - Массив из Структура
//				*Имя 			- Строка 		- Имя колонки
//				*Тип 			- ОписаниеТипов - Например   простой: ""Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));""
//												  Например составной: ""СоставнойТипДокумент = Новый Массив;
//											                           СоставнойТипДокумент.Добавить( Тип(""СправочникСсылка.Организация""));
//													                   СоставнойТипДокумент.Добавить( Тип(""СправочникСсылка.Контрагент""));""
//
//				*Заголовок 		- Строка - Синоним колонки
//				*СоставнойТип 	- Булево
//				*Ширина 		- Число
//
&НаКлиенте
Функция ОписаниеКолонокТаблицыЗначенийСтруктурой()	
	КолонокиТабЗнач  		= Новый Массив;
	ПредставлениеКолонок  	= Новый Массив;	
	КолонкиСвойства	 		= ""Имя,Тип,Заголовок,СоставнойТип,Ширина"";
    	
	ПредставлениеКолонок.Добавить(""Тип"");
	ПредставлениеКолонок.Добавить(""Имя"");
	ПредставлениеКолонок.Добавить(""Роль"");
	ПредставлениеКолонок.Добавить(""Сценарий"");
	ПредставлениеКолонок.Добавить(""Уровень"");
	ПредставлениеКолонок.Добавить(""Превышает"");
	
	ОбщийКвалификаторСтроки = Новый КвалификаторыСтроки(150);
	Для Каждого ИмяЗаголовок Из ПредставлениеКолонок Цикл
		ТекущееОписание = Новый ОписаниеТипов(""Строка"",, ОбщийКвалификаторСтроки);
		ТекущаяКолонка 	= Новый Структура(КолонкиСвойства, ИмяЗаголовок, ТекущееОписание, ИмяЗаголовок, Ложь, Неопределено);
		КолонокиТабЗнач.Добавить(ТекущаяКолонка);
	КонецЦикла;
	
	// > Если разные типы или точность
	//КвалификаторИмя       = Новый КвалификаторыСтроки(100);
	//КвалификаторЗаголовок = Новый КвалификаторыСтроки(150);
	//КвалификаторСумма     = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
	
	//ТипИмя 		        = Новый ОписаниеТипов(""Строка"",, КвалификаторИмя);
	//ТипЗаголовок 	        = Новый ОписаниеТипов(""Строка"",, КвалификаторЗаголовок);
	//ТипСумма 	            = Новый ОписаниеТипов(""Число"",,  КвалификаторСумма);
	//
	//ПредставлениеИмя       = ""Имя"";
	//ПредставлениеЗаголовок = ""Заголовок"";
	//ПредставлениеСумма     = ""Сумма"";
	//
	//КолонкаИмя 	   = Новый Структура(КолонкиСвойства, ПредставлениеИмя,       ТипТип,       ПредставлениеИмя, 	    Ложь, Неопределено);
	//КолонкаЗаголовок = Новый Структура(КолонкиСвойства, ПредставлениеЗаголовок, ТипЗаголовок, ПредставлениеЗаголовок, Ложь, Неопределено);
	//КолонкаСумма     = Новый Структура(КолонкиСвойства, ПредставлениеСумма, 	  ТипСумма,     ПредставлениеСумма, 	Ложь, Неопределено);
	//
	//КолонокиТабЗнач.Добавить(КолонкаИмя);
	//КолонокиТабЗнач.Добавить(КолонкаЗаголовок);
	//КолонокиТабЗнач.Добавить(КолонкаСумма);
	// < Если разные типы или точность
	
	Возврат КолонокиТабЗнач;
КонецФункции // ОписаниеКолонокТаблицыЗначенийСтруктурой

#КонецОбласти

#КонецОбласти"}
},
{0,
{"ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ",0,0,"ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ_Кистанов","#Область ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ
<?>
// Для быстрой загрузки данных табличного документа в таблицу значений.
// Заголовок колонок табДок должен соответствовать наименованию колонок Таблицы значений.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабДокумент - Коллекция табличный документ.
//   ТаблицаЗначенийПриемник - Коллекция таблица значений.
//
// Пример:
//   ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ(ТабДокумент, ТабЗначений);
//
&НаКлиенте
Процедура ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ(ТабДокумент, ТабЗначений)
	ПоследняяСтрока  = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	
	Для Строка = 2 По ПоследняяСтрока Цикл		
		НоваяСтрТЗ = ТабЗначений.Добавить();
		Для Колонка = 1 По ПоследняяКолонка Цикл
			имяКолонки = ТабДокумент.Область(1, Колонка).Текст;
			НоваяСтрТЗ[имяКолонки] = ПолучитьСодержаниеЯчейкиТабличногоДокумента(ТабДокумент, Строка, Колонка);
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСодержаниеЯчейкиТабличногоДокумента(пТабличныйДокумент, Строка, Колонка)	
	Если Колонка = 0 Тогда
		Возврат """";
	КонецЕсли;	
	мСодержание = пТабличныйДокумент.Область(""R"" + Формат(Строка,""ЧГ="") + ""C"" + Формат(Колонка,""ЧГ="")).Текст;	
	Возврат СокрЛП(мСодержание);
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьТабДокументВРезультатЗапроса",0,0,"ПреобразоватьТабДокументВРезультатЗапроса_Кистанов","#Область ПреобразоватьТабДокументВРезультатЗапроса
<?>
// ТабДок в результат запроса, Табличный документ как источник данных для ПостроительЗапроса.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабДокумент - Табличный документ
//
// Возвращаемое значение:
//   Коллекция - Результат запроса, 
//
// Пример:
//   РезультатЗапроса = ПреобразоватьТабДокументВРезультатЗапроса(ТабДокумент);
//
&НаСервереБезКонтекста
Функция ПреобразоватьТабДокументВРезультатЗапроса(ТабДокумент)
    ПоследняяСтрока  = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек     = ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
	
	ИсточникДанных   = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	
	ПостроительОтчета                         = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных          = ИсточникДанных;	
    ПостроительОтчета.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	
	ПостроительОтчета.ЗаполнитьНастройки();	
	ПостроительОтчета.Выполнить();
	
	Возврат ПостроительОтчета.Результат;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьМакетВРезультатЗапроса",0,0,"","#Область ПреобразоватьМакетВРезультатЗапроса
<?>
// Макет в результат запроса, например когда необходимо в макете хранить conf данные.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабДокумент - Табличный документ
//
// Возвращаемое значение:
//   Коллекция - Результат запроса, 
//
// Пример:
//   РезультатЗапроса = ПреобразоватьТабДокументВРезультатЗапроса(ТабДокумент);
//
&НаСервере
Процедура ПреобразоватьМакетВРезультатЗапроса<?ИмяМакет>(Макет, ИмяОбластиВыбора)
    //обк   = РеквизитФормыВЗначение(""Объект"");
    //Макет = обк.ПолучитьМакет(ИмяМакета);

    ПостроительЗапроса = Новый ПостроительЗапроса;
    ПостроительЗапроса.ИсточникДанных = Новый
    ОписаниеИсточникаДанных(Макет.Область(ИмяОбластиВыбора));
    ПостроительЗапроса.Выполнить();

    Результат = ПостроительЗапроса.Результат;
	
	Возврат Результат;
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ПреобразоватьТабДокументВВыборку",0,0,"ПреобразоватьТабДокументВВыборку_Кистанов","#Область ПреобразоватьТабДокументВВыборку

// Табличный документ с удобным заголовком (содержит синоним для пользователя), этот таб док
// по быстрому преобразовывается в выборку. ТабДокумент предположительно является элементом формы
//
// Рекомендация использовать с:
// 
//
// Зависимости:
//   Шаблоны - ПреобразоватьТабДокументВРезультатЗапроса
//
// Пример:
//   массивСтруктур = НовыйВыборкаПоТипу(""Документ"", ""уатПутевойЛист"", ВыбратьРеквизиты, 
//                                       ПараметрыЗапроса, УсловиеОбходаПереопределяемый);
//	
#Область ТочкаВхода
<?>
ПреобразоватьТабДокументВВыборку<?""Имя"">();

&НаКлиенте
Процедура ПреобразоватьТабДокументВВыборку<?""Имя"">()
	ОписаниеЗаголовкаТабДок = НовыйЗаголовокТабличногоДокумента();	
	УстановитьЗаголовокТабличногоДокумента(ОписаниеЗаголовкаТабДок, ""Наименование"");
	
	ПреобразоватьТабДокументВВыборкуНаСервереБезКонтекста(<?""ИмяТабличногоДокументаФормы"">);	
	УстановитьЗаголовокТабличногоДокумента(ОписаниеЗаголовкаТабДок, ""Синоним"");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) // событие формы ГДЕ создан ТабличныйДокумент
	ОписаниеЗаголовкаТабДок = НовыйЗаголовокТабличногоДокумента();
	УстановитьЗаголовокТабличногоДокумента(ОписаниеЗаголовкаТабДок);
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура ПреобразоватьТабДокументВВыборкуНаСервереБезКонтекста(ТабДокумент)
	выборка = ПреобразоватьТабДокументВРезультатЗапроса(ТабДокумент).Выбрать();
	
	//
	// ДЕЛАЕМ ЧТО-ТО С ВЫБОРКОЙ
	//
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокТабличногоДокумента(ОписаниеЗаголовкаТабДок, знчЗаголовка = ""Синоним"", ОбвестиОбласть = Истина)
	итераторА = 1;
	Для каждого э Из ОписаниеЗаголовкаТабДок Цикл
		область = <?""ИмяТабличногоДокументаФормы"">.Область(""R1C"" + итераторА);
		область.Текст = э[знчЗаголовка];
		область.СодержитЗначение = Ложь;
		
		Если ОбвестиОбласть Тогда		
			ОбвестиОбласть(область);		
		КонецЕсли;		
		
		итераторА = итераторА + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбвестиОбласть(область)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
	область.Обвести(Линия, Линия, Линия, Линия);
КонецПроцедуры

&НаКлиенте
Функция НовыйЗаголовокТабличногоДокумента()
	// Синоним для пользователя, Наименование для именования колонок выборки
	ОписаниеЗаголовкаТабДок = Новый Массив;
	ОписаниеЗаголовкаТабДок.Добавить(Новый Структура(""Синоним,Наименование"",""Код"",""Код""));
	ОписаниеЗаголовкаТабДок.Добавить(Новый Структура(""Синоним,Наименование"",""Наименование номенклатуры"",""Наименование""));	
	Возврат ОписаниеЗаголовкаТабДок;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьФайлЭкселВТабДокумент",0,0,"ПреобразоватьФайлЭкселВТабДокумент_Кистанов","#Область ПреобразоватьФайлЭкселВТабДокумент
<?>
//&НаСервереБезКонтекста
//Функция ПреобразоватьТабДокументВРезультатЗапроса(ТабличныйДокумент)
//   ЗапросПостроитель = Новый ПостроительЗапроса;
//   ЗапросПостроитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
//   ЗапросПостроитель.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
//   ЗапросПостроитель.ЗаполнитьНастройки();
//   ЗапросПостроитель.Выполнить();
//   Возврат ЗапросПостроитель.Результат;
//КонецФункции

// Метод Прочитать() доступен только на стороне сервера.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ПолныйПутьКФайлу - Строка - полный путь к файлу в формате Excel.
//
// Возвращаемое значение:
//   ТабДокумент - ТабличныйДокумент
//
// Пример:
// ТабДокумент = ПреобразоватьФайлЭкселВТабДокумент(ПутьКФайлуЭксел);
//
&НаСервереБезКонтекста
Функция ПреобразоватьФайлЭкселВТабДокумент(ПолныйПутьКФайлу)
	ТабДокумент = Новый ТабличныйДокумент; 
	ТабДокумент.Прочитать(ПолныйПутьКФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	Возврат ТабДокумент;
КонецФункции

#КонецОбласти"}
},
{0,
{"ЗаписатьТабличныйДокументВФайл",0,0,"ЗаписатьТабличныйДокументВФайл_Кистанов","#Область ЗаписатьТабличныйДокументВФайл
<?>
// Метод Записать() Доступен как на клиенте, так и на сервере.
// Внимание! В веб-клиенте использование данного варианта недоступно.
//
// Рекомендация использовать с:
// 
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ТабДокумент - Табличный документ - данные документа будут сохранены в файл.
//   ПолныйПутьФайла - Строка - только путь к файлу.
//   ИмяСохраняемогоФайла - Строка - только имя файла.
//   РасширениеСохраняемогоФайла - Строка - допускается использование форматов: 
//                                          ANSITXT, DOCX, XLSX, MXL, MXL7, ODS, PDF, TXT.
//
// Пример:
// ЗаписатьТабличныйДокументВФайл(ТабДокумент, ПолныйПутьФайла, ИмяСохраняемогоФайла, ""PDF"");
//
&НаКлиенте
Процедура ЗаписатьТабличныйДокументВФайл(ТабДокумент, ПолныйПутьФайла, ИмяСохраняемогоФайла, 
	                                                                   РасширениеСохраняемогоФайла = ""XLSX"")
    ИмяСохраняемогоФайла = имяФайлаБезРасширения + ""."" + РасширениеСохраняемогоФайла;
    ТабДокумент.Записать(ПолныйПутьФайла + ИмяСохраняемогоФайла, ТипФайлаТабличногоДокумента[РасширениеСохраняемогоФайла]);
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"БезМакетаРезультатЗапросаВТабличныйДокумент",0,0,"БезМакетаРезультатЗапросаВТабличныйДокумент_Кистанов"," #Область РезультатЗапросаВТабличныйДокумент
 <?>
// Вывести результат выполнения запроса в табличный документ.
//
// Рекомендация использовать с:
//   НовыйЗапрос, НовыйПараметры, УстановитьПараметрыЗапрос, ТекстЗапросаПрограммно
//
// Параметры:
//   РезультатЗапроса  - РезультатЗапроса, содержит результат выполнения запроса.
//   ТабличныйДокумент - ТабличныйДокумент, в который будет выведен результат запроса.
//
&НаСервереБезКонтекста
Процедура РезультатЗапросаВТабличныйДокумент(РезультатЗапроса, ТабличныйДокумент)
	
	Построитель = Новый ПостроительОтчета;
    Построитель.ИсточникДанных  = Новый ОписаниеИсточникаДанных(РезультатЗапроса);
    Построитель.Вывести(ТабличныйДокумент);

КонецПроцедуры // РезультатЗапросаВТабличныйДокумент()

#КонецОбласти"}
},
{0,
{"ПолучитьМассивСтруктурПереборомТабличногоДокумента",0,0,"ПолучитьМассивСтруктурПереборомТабличногоДокумента_Кистанов","#Область ПолучитьМассивСтруктурПереборомТабличногоДокумента

// Для передачи массива структур на сервер без контекста, а там можно преобразовать в ТЗ
// Исключительно для вызова на сервере без контекста иначе есть вариант проще!
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабДокумент - Коллекция табличный документ.
//
// Возвращаемое значение:
//   Результат - массив из структура, первая строка Табличный документ (заголовок) будет
//									  ключом структуры.
//
// Пример:
//   ПолучитьМассивСтруктурПереборомТабличногоДокумента(ТабДокумент); = Массив из Структура.
//
&НаКлиенте
Функция ПолучитьМассивСтруктурПереборомТабличногоДокумента(ТабДокумент)
	ПоследняяСтрока  = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	Результат 	  	 = Новый Массив;
	
	Для Строка = 2 По ПоследняяСтрока Цикл		
		ДанныеСтрокиТабДокумента = Новый Структура;
		Для Колонка = 1 По ПоследняяКолонка Цикл
			имяКолонки = ТабДокумент.Область(1, Колонка).Текст;
			СодержимоеЯчейки = ПолучитьСодержаниеЯчейкиТабличногоДокумента(ТабДокумент, Строка, Колонка);
			ДанныеСтрокиТабДокумента.Вставить(имяКолонки, СодержимоеЯчейки);
		КонецЦикла;
		
		Результат.Добавить(ДанныеСтрокиТабДокумента);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти"}
}
}
}
}